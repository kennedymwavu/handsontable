---
title: "options"
---

```{r load-pkg, include=FALSE}
library(handsontable)
```

`{handsontable}` has 4 main functions to help you configure
options for the table:

- [`handsontable()`](#handsontable)
- [`hot_context_menu()`](#hot_context_menu)
- [`hot_col()`](#hot_col)
- [`hot_row()`](#hot_row)

## handsontable

`handsontable()` allows you to configure table-wide options.

### data

- your table data. must be a `data.frame` or a `matrix` object.

```{r table-data}
handsontable(data = iris)
```

### width

- sets the width of the table

```{r table-width}
handsontable(
  data = iris[1:3, ],
  width = 400,
  adaptiveHeight = TRUE
)
```

### height

- sets the height of the table

```{r table-height}
handsontable(
  data = iris[1:50, ],
  height = 200
)
```

### adaptiveHeight

- if `TRUE` the table's height adapts to fit it's contents. useful
  when you want to show the full table regardless of the number
  of rows in your data.
- if `TRUE`, overrides the [`height`](#height) parameter.

- `adaptiveHeight = FALSE`:

```{r adaptiveHeight-FALSE}
handsontable(
  data = mtcars,
  rowHeaders = FALSE,
  adaptiveHeight = FALSE
)
```

- `adaptiveHeight = TRUE`:

```{r adaptiveHeight-TRUE}
handsontable(
  data = mtcars,
  rowHeaders = FALSE,
  adaptiveHeight = TRUE
)
```

### colHeaders

- column names to use.
- can be a logical (`TRUE` or `FALSE`) or a character vector of
  column names to use.
- `colHeaders = TRUE` uses the column names of the data:

```{r colHeaders-TRUE}
handsontable(
  data = iris[1:3, ],
  colHeaders = TRUE,
  adaptiveHeight = TRUE
)
```

- `colHeaders = FALSE` omits the column names of the data and uses
  excel-like naming for the columns ie. "A", "B", "C", etc.

```{r colHeaders-FALSE}
handsontable(
  data = iris[1:3, ],
  colHeaders = FALSE,
  adaptiveHeight = TRUE
)
```

- you can as well use a character vector to rename the rendered
  columns. this doesn't change the column names of the underlying
  data.

```{r colHeaders-char-vector}
handsontable(
  data = iris[1:3, ],
  colHeaders = c(
    "Sepal Length",
    "Sepal Width",
    "Petal Length",
    "Petal Width",
    "Species"
  ),
  adaptiveHeight = TRUE
)
```

### rowHeaders

- row names to use.
- can be a logical (`TRUE` or `FALSE`) or a character vector of
  row names to use.
- `rowHeaders = TRUE` uses row names of the data:

```{r rowHeaders-TRUE}
handsontable(
  data = mtcars[1:3, ],
  rowHeaders = TRUE,
  rowHeaderWidth = 200,
  adaptiveHeight = TRUE
)
```

- `rowHeaders = FALSE` omits the row names column:

```{r rowHeaders-FALSE}
handsontable(
  data = mtcars[1:3, ],
  rowHeaders = FALSE,
  adaptiveHeight = TRUE
)
```

- use a character vector if you want to customize the name
of each row:

```{r rowHeaders-char-vector}
handsontable(
  data = mtcars[1:3, ],
  rowHeaders = paste0(LETTERS, letters)[1:3],
  adaptiveHeight = TRUE
)
```

### readOnly

- by default, a handsontable is editable. ie. `readOnly = FALSE`.
- set `readOnly = TRUE` to make the table uneditable.

```{r readOnly-FALSE}
handsontable(
  data = iris[1:3, ],
  readOnly = TRUE,
  adaptiveHeight = TRUE
)
```

### colWidths

- use `colWidths` to configure the width of all or individual columns.
- if `colWidths` is a scalar numeric eg. `colWidths = 200`, this width is used
  for all columns.

  ```{r colWidths-scalar-numeric}
  handsontable(
    data = iris[1:3, ],
    colWidths = 300,
    adaptiveHeight = TRUE
  )
  ```
- if `colWidths` is a numeric vector of length greater than 1, eg. 
  `colWidths = c(100, 200, 300)`, then the columns corresponding to those
  indices are given the said widths.

  ```{r colWidths-numeric-vector}
  handsontable(
    data = iris[1:3, ],
    colWidths = c(100, 200, 300), # other columns use default width
    adaptiveHeight = TRUE
  )
  ```

- `colWidths` can as well be a JavaScript function based on visual indexes.

  ```{r colWidths-js-function}
  handsontable(
    data = iris[1:3, ],
    colWidths = htmlwidgets::JS(
      "
      function(index) {
        return index * 10 + 30;
      }
      "
    ),
    adaptiveHeight = TRUE
  )
  ```
  JavaScript uses zero-indexing. so the actual calculations that happen are:
  - 0 &times; 10 + 30 = 30
  - 1 &times; 10 + 30 = 40
  - 2 &times; 10 + 30 = 50
  - 3 &times; 10 + 30 = 60
  - 4 &times; 10 + 30 = 70

## hot_context_menu

with `hot_context_menu()`, you can configure options for the
table's context menu ie. the menu you see when you right-click
on a handsontable.

## hot_col

use `hot_col()` to configure options for columns. this can be
a single column or multiple of them.

## hot_row

- config options for rows

use `hot_row()` to configure options for rows.
