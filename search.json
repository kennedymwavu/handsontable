[{"path":"https://kennedymwavu.github.io/handsontable/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 handsontable authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"configuration-options","dir":"Articles","previous_headings":"","what":"Configuration Options","title":"Configuration Options","text":"vignette covers various configuration functions available handsontable package, allowing customize every aspect tables.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"general-table-configuration","dir":"Articles","previous_headings":"Configuration Options","what":"General Table Configuration","title":"Configuration Options","text":"handsontable() function controls overall table behavior features.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"context-menu-and-interaction","dir":"Articles","previous_headings":"Configuration Options > General Table Configuration","what":"Context Menu and Interaction","title":"Configuration Options","text":"","code":"# Enable context menu and other interactive features handsontable(   data = iris[1:8, ],   filters = TRUE,   manualColumnSorting = TRUE,   search = TRUE,   undo = TRUE ) |>   hot_context_menu()"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"multiple-column-sorting","dir":"Articles","previous_headings":"Configuration Options > General Table Configuration","what":"Multiple Column Sorting","title":"Configuration Options","text":"","code":"# Enable multi-column sorting handsontable(   data = mtcars[1:10, 1:6],   multiColumnSorting = TRUE,   outsideClickDeselects = TRUE )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"fill-handle-configuration","dir":"Articles","previous_headings":"Configuration Options > General Table Configuration","what":"Fill Handle Configuration","title":"Configuration Options","text":"","code":"# Configure fill handle behavior handsontable(   data = data.frame(     Numbers = 1:5,     Letters = letters[1:5]   ),   fillHandle = list(     direction = \"vertical\",     autoInsertRow = TRUE   ) )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"individual-column-configuration-with-hot_col","dir":"Articles","previous_headings":"Configuration Options","what":"Individual Column Configuration with hot_col()","title":"Configuration Options","text":"Use hot_col() configure specific columns different types behaviors.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"text-columns","dir":"Articles","previous_headings":"Configuration Options > Individual Column Configuration with hot_col()","what":"Text Columns","title":"Configuration Options","text":"","code":"# Configure a text column data <- data.frame(   ID = 1:5,   Name = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eve\"),   Notes = rep(\"\", 5) )  handsontable(data) |>   hot_col(col = 1, readOnly = TRUE, width = 50) |>   hot_col(col = 2, type = \"text\", width = 100) |>   hot_col(col = 3, type = \"text\", width = 200)"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"numeric-columns","dir":"Articles","previous_headings":"Configuration Options > Individual Column Configuration with hot_col()","what":"Numeric Columns","title":"Configuration Options","text":"","code":"# Configure numeric columns with formatting financial_data <- data.frame(   Product = c(\"Widget A\", \"Widget B\", \"Widget C\"),   Price = c(19.99, 24.50, 15.75),   Quantity = c(100, 250, 75) )  handsontable(financial_data) |>   hot_col(col = 2, type = \"numeric\", format = \"$0.00\") |>   hot_col(col = 3, type = \"numeric\", format = \"0,0\")"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"dropdown-columns","dir":"Articles","previous_headings":"Configuration Options > Individual Column Configuration with hot_col()","what":"Dropdown Columns","title":"Configuration Options","text":"","code":"# Create dropdown columns employee_data <- data.frame(   Name = c(\"John\", \"Jane\", \"Bob\"),   Department = c(\"IT\", \"HR\", \"Finance\"),   Level = c(\"Senior\", \"Junior\", \"Manager\"),   stringsAsFactors = FALSE )  handsontable(employee_data) |>   hot_col(     col = 2,     type = \"dropdown\",     source = c(\"IT\", \"HR\", \"Finance\", \"Marketing\", \"Sales\"),     strict = TRUE   ) |>   hot_col(     col = 3,     type = \"dropdown\",     source = c(\"Junior\", \"Senior\", \"Manager\", \"Director\"),     strict = TRUE   )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"autocomplete-columns","dir":"Articles","previous_headings":"Configuration Options > Individual Column Configuration with hot_col()","what":"Autocomplete Columns","title":"Configuration Options","text":"","code":"# Create autocomplete columns (like dropdown but with filtering) country_data <- data.frame(   City = c(\"New York\", \"London\", \"Tokyo\"),   Country = c(\"USA\", \"UK\", \"Japan\"),   Region = c(\"North America\", \"Europe\", \"Asia\"),   stringsAsFactors = FALSE )  countries <- c(\"USA\", \"UK\", \"Japan\", \"Germany\", \"France\", \"Canada\", \"Australia\", \"Brazil\") regions <- c(\"North America\", \"Europe\", \"Asia\", \"Oceania\", \"South America\")  handsontable(country_data) |>   hot_col(     col = 2,     type = \"autocomplete\",     source = countries,     strict = FALSE, # Allow new values     filter = TRUE, # Enable filtering as you type     trimDropdown = TRUE # Fit dropdown to content   ) |>   hot_col(     col = 3,     type = \"autocomplete\",     source = regions,     strict = TRUE, # Only allow values from source     filter = TRUE   )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"checkbox-columns","dir":"Articles","previous_headings":"Configuration Options > Individual Column Configuration with hot_col()","what":"Checkbox Columns","title":"Configuration Options","text":"","code":"# Configure checkbox columns task_data <- data.frame(   Task = c(\"Review code\", \"Write tests\", \"Update docs\"),   Completed = c(TRUE, FALSE, FALSE),   Priority = c(\"High\", \"Medium\", \"Low\") )  handsontable(task_data) |>   hot_col(     col = 2,     type = \"checkbox\"   )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"date-columns","dir":"Articles","previous_headings":"Configuration Options > Individual Column Configuration with hot_col()","what":"Date Columns","title":"Configuration Options","text":"","code":"# Configure date columns schedule_data <- data.frame(   Event = c(\"Meeting\", \"Deadline\", \"Review\"),   Date = as.Date(c(\"2024-01-15\", \"2024-01-20\", \"2024-01-25\")),   stringsAsFactors = FALSE )  handsontable(schedule_data) |>   hot_col(col = 2, type = \"date\", dateFormat = \"YYYY-MM-DD\")"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"password-columns","dir":"Articles","previous_headings":"Configuration Options > Individual Column Configuration with hot_col()","what":"Password Columns","title":"Configuration Options","text":"","code":"# Configure password columns (text is hidden) login_data <- data.frame(   Username = c(\"user1\", \"user2\", \"admin\"),   Password = c(\"secret123\", \"pass456\", \"admin789\"),   Active = c(TRUE, TRUE, FALSE),   stringsAsFactors = FALSE )  handsontable(login_data) |>   hot_col(     col = 2,     type = \"password\",     copyable = FALSE # Prevent copying password values   )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"advanced-numeric-formatting","dir":"Articles","previous_headings":"Configuration Options > Individual Column Configuration with hot_col()","what":"Advanced Numeric Formatting","title":"Configuration Options","text":"","code":"# Advanced numeric formatting options financial_detailed <- data.frame(   Item = c(\"Revenue\", \"Expenses\", \"Profit\", \"Tax\"),   Amount = c(1234567.89, -234567.12, 1000000.77, -150000.50),   Percentage = c(0.15, -0.05, 0.12, -0.03),   Units = c(1500000, 750000, 2250000, 500000) )  handsontable(financial_detailed) |>   hot_col(     col = 2,     type = \"numeric\",     numericFormat = list(       pattern = \"$0,0.00\",       culture = \"en-US\"     )   ) |>   hot_col(     col = 3,     type = \"numeric\",     numericFormat = list(       pattern = \"0.00%\"     )   ) |>   hot_col(     col = 4,     type = \"numeric\",     numericFormat = list(       pattern = \"0.0a\" # Abbreviated format (1.5M, 750k, etc.)     )   )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"individual-row-configuration-with-hot_row","dir":"Articles","previous_headings":"Configuration Options","what":"Individual Row Configuration with hot_row()","title":"Configuration Options","text":"Configure specific rows different properties.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"read-only-rows","dir":"Articles","previous_headings":"Configuration Options > Individual Row Configuration with hot_row()","what":"Read-Only Rows","title":"Configuration Options","text":"","code":"# Make specific rows read-only data <- iris[1:8, ]  ht <- handsontable(data) for (i in c(1, 3, 5)) {   ht <- ht |> hot_row(row = i, readOnly = TRUE) } ht"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"context-menu-configuration-with-hot_context_menu","dir":"Articles","previous_headings":"Configuration Options","what":"Context Menu Configuration with hot_context_menu()","title":"Configuration Options","text":"Customize right-click context menu.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"basic-context-menu","dir":"Articles","previous_headings":"Configuration Options > Context Menu Configuration with hot_context_menu()","what":"Basic Context Menu","title":"Configuration Options","text":"","code":"handsontable(mtcars[1:6, 1:4]) |>   hot_context_menu()"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"csv-export-built-in-feature","dir":"Articles","previous_headings":"Configuration Options > Context Menu Configuration with hot_context_menu()","what":"CSV Export (Built-in Feature)","title":"Configuration Options","text":"context menu automatically includes “Download CSV” option properly handles empty values, NAs, special characters:","code":"# CSV export is automatically included when context menu is enabled csv_test_data <- data.frame(   Name = c(\"John\", \"Jane\", \"\", \"Bob\", NA),   Age = c(25, NA, 30, 35, 28),   City = c(\"New York\", \"Boston\", \"\", \"Chicago\", \"Seattle\"),   Salary = c(50000, 60000, NA, 70000, 55000),   Notes = c(\"Manager\", \"\", \"Developer, Senior\", NA, \"Designer\"),   Active = c(TRUE, FALSE, NA, TRUE, FALSE),   stringsAsFactors = FALSE )  # Right-click to see \"Download to CSV\" option handsontable(csv_test_data) |>   hot_context_menu()"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"custom-context-menu-configuration","dir":"Articles","previous_headings":"Configuration Options > Context Menu Configuration with hot_context_menu()","what":"Custom Context Menu Configuration","title":"Configuration Options","text":"","code":"# Use specific built-in context menu options handsontable(csv_test_data[1:3, 1:3]) |>   hot_context_menu(opts = c(\"row_above\", \"row_below\", \"---------\", \"copy\", \"cut\"))"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"custom-actions-with-javascript-callbacks","dir":"Articles","previous_headings":"Configuration Options > Context Menu Configuration with hot_context_menu()","what":"Custom Actions with JavaScript Callbacks","title":"Configuration Options","text":"","code":"# Add custom actions with JavaScript callbacks custom_actions <- list(   list(     name = \"Custom Action\",     callback = htmlwidgets::JS(\"function() { alert('Custom action clicked!'); }\")   ) )  handsontable(data = csv_test_data[1:5, 1:3]) |>   hot_context_menu(     opts = c(\"copy\", \"cut\", \"clear_column\"),     customOpts = custom_actions   )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"limited-context-menu-options","dir":"Articles","previous_headings":"Configuration Options > Context Menu Configuration with hot_context_menu()","what":"Limited Context Menu Options","title":"Configuration Options","text":"","code":"# Only show specific context menu options handsontable(iris[1:5, 1:3]) |>   hot_context_menu(opts = c(\"copy\", \"undo\", \"redo\"))"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"custom-borders-with-customborders","dir":"Articles","previous_headings":"Configuration Options","what":"Custom Borders with customBorders","title":"Configuration Options","text":"Add custom borders around specific cell ranges highlight important data.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"basic-border-configuration","dir":"Articles","previous_headings":"Configuration Options > Custom Borders with customBorders","what":"Basic Border Configuration","title":"Configuration Options","text":"","code":"# Add red borders around specific cells financial_data <- data.frame(   Quarter = c(\"Q1\", \"Q2\", \"Q3\", \"Q4\"),   Revenue = c(120000, 135000, 148000, 162000),   Profit = c(25000, 30000, 35000, 42000) )  handsontable(financial_data) |>   handsontable(     customBorders = list(       # Border around revenue header and data (0-based indexing)       list(         range = list(from = list(row = 0, col = 1), to = list(row = 3, col = 1)),         top = list(width = 2, color = \"blue\"),         right = list(width = 2, color = \"blue\"),         bottom = list(width = 2, color = \"blue\"),         left = list(width = 2, color = \"blue\")       )     )   )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"multiple-border-regions","dir":"Articles","previous_headings":"Configuration Options > Custom Borders with customBorders","what":"Multiple Border Regions","title":"Configuration Options","text":"","code":"# Add different colored borders for different regions performance_data <- data.frame(   Team = c(\"Sales\", \"Marketing\", \"Engineering\", \"Support\"),   Q1 = c(95, 87, 92, 89),   Q2 = c(88, 91, 94, 85),   Q3 = c(92, 89, 96, 88),   Q4 = c(97, 93, 98, 91) )  handsontable(performance_data) |>   handsontable(     customBorders = list(       # Green border for high performers (Engineering row - row 2, cols 1-4)       list(         range = list(from = list(row = 2, col = 1), to = list(row = 2, col = 4)),         top = list(width = 3, color = \"green\"),         right = list(width = 3, color = \"green\"),         bottom = list(width = 3, color = \"green\"),         left = list(width = 3, color = \"green\")       ),       # Red border for attention needed (Support Q2 - row 3, col 2)       list(         range = list(from = list(row = 3, col = 2), to = list(row = 3, col = 2)),         top = list(width = 2, color = \"red\"),         right = list(width = 2, color = \"red\"),         bottom = list(width = 2, color = \"red\"),         left = list(width = 2, color = \"red\")       )     )   )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"border-styles-and-patterns","dir":"Articles","previous_headings":"Configuration Options > Custom Borders with customBorders","what":"Border Styles and Patterns","title":"Configuration Options","text":"","code":"# Different border styles for different purposes budget_data <- data.frame(   Category = c(\"Revenue\", \"Expenses\", \"Net Income\", \"Forecast\"),   Actual = c(250000, -180000, 70000, 75000),   Budget = c(240000, -185000, 55000, 60000),   Variance = c(10000, 5000, 15000, 15000) )  handsontable(budget_data) |>   handsontable(     customBorders = list(       # Thick blue border for Net Income row (row 2, all columns)       list(         range = list(from = list(row = 2, col = 0), to = list(row = 2, col = 3)),         top = list(width = 3, color = \"#2196F3\"),         bottom = list(width = 3, color = \"#2196F3\")       ),       # Orange border for forecast row (row 3, all columns)       list(         range = list(from = list(row = 3, col = 0), to = list(row = 3, col = 3)),         top = list(width = 1, color = \"#FFA726\"),         right = list(width = 1, color = \"#FFA726\"),         bottom = list(width = 1, color = \"#FFA726\"),         left = list(width = 1, color = \"#FFA726\")       )     )   )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"dynamic-border-updates","dir":"Articles","previous_headings":"Configuration Options > Custom Borders with customBorders","what":"Dynamic Border Updates","title":"Configuration Options","text":"Borders can updated dynamically Shiny applications:","code":"# Example for Shiny (not executed in vignette) library(shiny)  ui <- fluidPage(   handsontableOutput(\"dynamic_table\"),   actionButton(\"highlight_profit\", \"Highlight Profit Column\"),   actionButton(\"clear_borders\", \"Clear All Borders\") )  server <- function(input, output, session) {   border_state <- reactiveVal(0)    output$dynamic_table <- renderHandsontable({     data <- data.frame(       Product = c(\"A\", \"B\", \"C\"),       Sales = c(100, 200, 150),       Profit = c(25, 50, 30)     )      if (border_state() == 1) {       # Add borders around profit column (col 2, rows 0-2)       handsontable(data) |>         handsontable(           customBorders = list(             list(               range = list(from = list(row = 0, col = 2), to = list(row = 2, col = 2)),               top = list(width = 2, color = \"gold\"),               right = list(width = 2, color = \"gold\"),               bottom = list(width = 2, color = \"gold\"),               left = list(width = 2, color = \"gold\")             )           )         )     } else {       # No borders       handsontable(data) |>         handsontable(customBorders = list())     }   })    observeEvent(input$highlight_profit, {     border_state(1)   })   observeEvent(input$clear_borders, {     border_state(0)   }) }"},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"border-configuration-notes","dir":"Articles","previous_headings":"Configuration Options > Custom Borders with customBorders","what":"Border Configuration Notes","title":"Configuration Options","text":"IMPORTANT: 0-based indexing: Use 0-based indexing borders (row 0 = first row, col 0 = first column) Range Specification: define cell range borders Border Sides: Specify top, right, bottom, left independently Width: Border thickness pixels (1-5 typically work well) Color: Use hex codes (#FF0000) color names (red, blue, etc.) Clearing Borders: Set customBorders = list() remove borders Performance: Many borders can affect rendering performance large tables Indexing Note: Unlike R’s 1-based indexing, customBorders uses JavaScript’s 0-based indexing","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"combining-multiple-configurations","dir":"Articles","previous_headings":"Configuration Options","what":"Combining Multiple Configurations","title":"Configuration Options","text":"real-world applications require combining multiple configuration options:","code":"# A comprehensive example with multiple configurations sales_data <- data.frame(   Date = seq(as.Date(\"2024-01-01\"), by = \"day\", length.out = 10),   Product = rep(c(\"Widget A\", \"Widget B\"), 5),   Quantity = sample(10:100, 10),   Price = round(runif(10, 10, 50), 2),   Total = 0, # Will be calculated   Approved = rep(FALSE, 10) )  handsontable(sales_data,   filters = TRUE,   manualColumnSorting = TRUE,   search = TRUE,   undo = TRUE ) |>   # Configure individual columns   hot_col(col = 1, type = \"date\", dateFormat = \"YYYY-MM-DD\", width = 100) |>   hot_col(     col = 2, type = \"dropdown\",     source = c(\"Widget A\", \"Widget B\", \"Widget C\"), width = 100   ) |>   hot_col(col = 3, type = \"numeric\", format = \"0,0\", width = 80) |>   hot_col(col = 4, type = \"numeric\", format = \"$0.00\", width = 80) |>   hot_col(col = 5, type = \"numeric\", format = \"$0.00\", readOnly = TRUE, width = 80) |>   hot_col(col = 6, type = \"checkbox\", width = 80) |>   # Configure context menu   hot_context_menu()"},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"order-matters","dir":"Articles","previous_headings":"Configuration Options > Tips for Configuration","what":"1. Order Matters","title":"Configuration Options","text":"Apply configurations typical order: 1. Column configurations (hot_col()) 1. Row configurations (hot_row()) 1. Table-wide features (handsontable()) 1. Context menu customizations (hot_context_menu())","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"column-indexing","dir":"Articles","previous_headings":"Configuration Options > Tips for Configuration","what":"2. Column Indexing","title":"Configuration Options","text":"Columns 1-indexed R (first column 1) can use column names colHeaders = TRUE","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"performance-considerations","dir":"Articles","previous_headings":"Configuration Options > Tips for Configuration","what":"3. Performance Considerations","title":"Configuration Options","text":"large datasets, consider limiting features like sorting filtering Use readOnly = TRUE display-tables Set specific column widths avoid auto-calculation overhead","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/configuration-options.html","id":"responsive-design","dir":"Articles","previous_headings":"Configuration Options > Tips for Configuration","what":"4. Responsive Design","title":"Configuration Options","text":"covers main configuration options available handsontable package. next vignettes cover data validation Shiny integration.","code":"# Create responsive tables handsontable(mtcars[1:5, 1:4], colWidths = \"auto\", stretchH = \"all\")"},{"path":"https://kennedymwavu.github.io/handsontable/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with handsontable","text":"handsontable package provides R interface powerful Handsontable JavaScript library, bringing spreadsheet-like functionality R Shiny applications. vignette get started basics.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/getting-started.html","id":"what-is-handsontable","dir":"Articles","previous_headings":"Introduction","what":"What is Handsontable?","title":"Getting Started with handsontable","text":"Handsontable interactive data grid combines familiarity spreadsheets power professional data grids. provides: Interactive editing - Click edit cells directly Data validation - Ensure data quality built-validators Flexible formatting - Control appearance behavior Shiny integration - Seamless reactive programming support","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/getting-started.html","id":"your-first-handsontable","dir":"Articles","previous_headings":"Introduction","what":"Your First Handsontable","title":"Getting Started with handsontable","text":"simplest way create handsontable pass data.frame handsontable() function: creates interactive table : Column headers data.frame column names Row numbers left Editable cells Automatic column width adjustment","code":"# Create a basic handsontable handsontable(mtcars[1:5, 1:4])"},{"path":"https://kennedymwavu.github.io/handsontable/articles/getting-started.html","id":"working-with-different-data-types","dir":"Articles","previous_headings":"Introduction","what":"Working with Different Data Types","title":"Getting Started with handsontable","text":"Handsontable can display different R data types:","code":"# Create a dataset with mixed types mixed_data <- data.frame(   Name = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\"),   Age = c(25, 30, 35, 28),   Salary = c(50000, 65000, 75000, 60000),   Active = c(TRUE, FALSE, TRUE, TRUE),   Department = factor(c(\"IT\", \"HR\", \"Finance\", \"IT\")),   Start_Date = as.Date(c(\"2020-01-15\", \"2019-03-10\", \"2018-07-22\", \"2021-02-01\")) )  handsontable(mixed_data)"},{"path":"https://kennedymwavu.github.io/handsontable/articles/getting-started.html","id":"enhanced-type-aware-configuration","dir":"Articles","previous_headings":"Introduction > Working with Different Data Types","what":"Enhanced Type-Aware Configuration","title":"Getting Started with handsontable","text":"better user experience proper type handling, configure column hot_col(): enhanced configuration provides: Text columns: Standard text input validation Numeric columns: Number formatting numeric validation Checkboxes: Interactive true/false toggles instead text Dropdowns: Constrained selection predefined options Date pickers: Calendar interface date selection hot_col() function real type-awareness happens, transforming basic data display rich, interactive input controls.","code":"handsontable(mixed_data) |>   hot_col(col = 1, type = \"text\") |> # Name as text input   hot_col(col = 2, type = \"numeric\") |> # Age as numeric input   hot_col(col = 3, type = \"numeric\", format = \"$0,0\") |> # Salary with currency format   hot_col(col = 4, type = \"checkbox\") |> # Active as checkbox   hot_col(     col = 5, type = \"dropdown\",     source = c(\"IT\", \"HR\", \"Finance\", \"Marketing\", \"Sales\")   ) |> # Department as dropdown   hot_col(col = 6, type = \"date\", dateFormat = \"YYYY-MM-DD\") # Start_Date as date picker"},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/getting-started.html","id":"custom-headers","dir":"Articles","previous_headings":"Introduction > Basic Customization","what":"Custom Headers","title":"Getting Started with handsontable","text":"can provide custom column headers:","code":"handsontable(   iris[1:8, ],   colHeaders = c(\"Sepal L\", \"Sepal W\", \"Petal L\", \"Petal W\", \"Species\") )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/getting-started.html","id":"controlling-headers-and-sizing","dir":"Articles","previous_headings":"Introduction > Basic Customization","what":"Controlling Headers and Sizing","title":"Getting Started with handsontable","text":"","code":"handsontable(   mtcars[, 1:4],   colHeaders = TRUE, # Show column headers (default)   rowHeaders = FALSE, # Hide row numbers   width = \"100%\", # Full width   height = \"300px\" # Fixed height )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/getting-started.html","id":"context-menu","dir":"Articles","previous_headings":"Introduction > Basic Customization","what":"Context Menu","title":"Getting Started with handsontable","text":"Use hot_context_menu(): Right click cell, row column see context menu.","code":"handsontable(iris[1:5, ]) |>   hot_context_menu()"},{"path":"https://kennedymwavu.github.io/handsontable/articles/getting-started.html","id":"read-only-tables","dir":"Articles","previous_headings":"Introduction > Basic Customization","what":"Read-Only Tables","title":"Getting Started with handsontable","text":"Make entire table read-:","code":"handsontable(   iris[1:5, ],   readOnly = TRUE )"},{"path":"https://kennedymwavu.github.io/handsontable/articles/getting-started.html","id":"matrix-input","dir":"Articles","previous_headings":"Introduction","what":"Matrix Input","title":"Getting Started with handsontable","text":"Handsontable also works matrices:","code":"# Create a matrix mat <- matrix(1:12, nrow = 3, ncol = 4) colnames(mat) <- paste(\"Col\", 1:4) rownames(mat) <- paste(\"Row\", 1:3)  handsontable(mat)"},{"path":"https://kennedymwavu.github.io/handsontable/articles/getting-started.html","id":"understanding-the-widget-output","dir":"Articles","previous_headings":"Introduction","what":"Understanding the Widget Output","title":"Getting Started with handsontable","text":"create handsontable, get htmlwidget object contains:","code":"ht <- handsontable(iris[1:3, 1:3])  # The widget has these main components: # - x$data: The data in JavaScript format # - x$colHeaders: Column header names # - x$rowHeaders: Whether to show row headers # - x$readOnly: Whether the table is read-only"},{"path":"https://kennedymwavu.github.io/handsontable/articles/getting-started.html","id":"next-steps","dir":"Articles","previous_headings":"Introduction","what":"Next Steps","title":"Getting Started with handsontable","text":"introduction covered basics creating handsontables. next vignettes, ’ll learn : Configuration Options: Detailed customization appearance behavior Data Validation: Ensuring data quality validators Shiny Integration: Building interactive applications Advanced Features: Context menus, sorting, filtering, Try experimenting examples see tables respond interactions!","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"shiny-integration","dir":"Articles","previous_headings":"","what":"Shiny Integration","title":"Shiny Integration","text":"handsontable package designed seamless integration Shiny applications. vignette covers everything need know using handsontables reactive applications.","code":""},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"essential-components","dir":"Articles","previous_headings":"Shiny Integration > Basic Shiny Integration","what":"Essential Components","title":"Shiny Integration","text":"Every Shiny app handsontables needs three main components: Output function: handsontableOutput() UI Render function: renderHandsontable() server Input detection: Reactive access table changes","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"minimal-example","dir":"Articles","previous_headings":"Shiny Integration > Basic Shiny Integration","what":"Minimal Example","title":"Shiny Integration","text":"","code":"library(shiny) library(handsontable)  ui <- fluidPage(   titlePanel(\"Basic Handsontable\"),   handsontableOutput(\"table\") )  server <- function(input, output, session) {   output$table <- renderHandsontable({     handsontable(mtcars[1:6, 1:4])   }) }  shinyApp(ui, server)"},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"detecting-changes","dir":"Articles","previous_headings":"Shiny Integration","what":"Detecting Changes","title":"Shiny Integration","text":"powerful feature Shiny integration ability react table changes real-time.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"basic-change-detection","dir":"Articles","previous_headings":"Shiny Integration > Detecting Changes","what":"Basic Change Detection","title":"Shiny Integration","text":"","code":"library(shiny) library(handsontable)  ui <- fluidPage(   titlePanel(\"Change Detection\"),   handsontableOutput(\"table\"),   br(),   h4(\"Change Information:\"),   verbatimTextOutput(\"change_info\") )  server <- function(input, output, session) {   # Create initial data   initial_data <- data.frame(     Name = c(\"Alice\", \"Bob\", \"Charlie\"),     Age = c(25, 30, 35),     Department = c(\"IT\", \"HR\", \"Finance\")   )    output$table <- renderHandsontable({     handsontable(initial_data)   })    # React to any change in the table   observeEvent(input$table, {     cat(\"Table changed at:\", as.character(Sys.time()), \"\\n\")      if (!is.null(input$table)) {       # Get the current data       current_data <- hot_to_r(input$table)       print(current_data)        # Check what type of change occurred       if (!is.null(input$table$changes)) {         cat(\"Number of cell changes:\", length(input$table$changes), \"\\n\")       }     }   })    output$change_info <- renderText({     if (is.null(input$table)) {       \"No changes yet\"     } else {       paste(         \"Last change at:\",         Sys.time(),         \"\\n\",         \"Event type:\",         input$table$event %||% \"afterChange\",         \"\\n\",         \"Data rows:\",         length(input$table$data %||% list())       )     }   }) }  shinyApp(ui, server)"},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"available-input-values","dir":"Articles","previous_headings":"Shiny Integration > Detecting Changes","what":"Available Input Values","title":"Shiny Integration","text":"handsontable changes, several input values become available: input$table - Main input complete information “afterChange” “afterSelection” “afterCreateRow” “afteRemoveRow” “afterCreateCol” “afterRemoveCol” input$table_data - Just current data input$table_changes - Specific change details input$table_select - Current selection information","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"event-hooks","dir":"Articles","previous_headings":"Shiny Integration","what":"Event Hooks","title":"Shiny Integration","text":"Handsontable provides several event hooks allow react specific user interactions. hook sends detailed information event, including event type identifier additional context-specific parameters.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"afterchange-hook","dir":"Articles","previous_headings":"Shiny Integration > Event Hooks","what":"afterChange Hook","title":"Shiny Integration","text":"afterChange hook fires whenever cell data modified. provides information changed, including source change (edit, paste, fill, etc.).","code":"library(shiny) library(handsontable)  # Sample data sample_data <- data.frame(   ID = 1:5,   Name = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eve\"),   Score = c(85, 92, 78, 95, 88),   Grade = c(\"B\", \"A\", \"C\", \"A\", \"B\"),   Active = c(TRUE, FALSE, TRUE, TRUE, FALSE) )  ui <- fluidPage(   titlePanel(\"afterChange Hook Demo - Event & Source Parameters\"),      fluidRow(     column(8,       h4(\"Interactive Handsontable\"),       p(\"Try editing cells, pasting data, or using the context menu to see different source types:\"),       tags$ul(         tags$li(\"Edit a cell directly (source: 'edit')\"),         tags$li(\"Copy/paste data (source: 'paste')\"),         tags$li(\"Use fill handle to drag data (source: 'autofill')\"),         tags$li(\"Right-click and insert/remove rows (source: 'UndoRedo.redo' or similar)\")       ),       handsontableOutput(\"demo_table\", height = \"300px\")     ),          column(4,       h4(\"Change Event Log\"),       p(\"Real-time log of afterChange events:\"),       verbatimTextOutput(\"change_log\", placeholder = TRUE),              br(),       h4(\"Current Data Structure\"),       verbatimTextOutput(\"data_structure\", placeholder = TRUE),              br(),       actionButton(\"clear_log\", \"Clear Log\", class = \"btn-warning btn-sm\"),       br(), br(),       actionButton(\"programmatic_update\", \"Programmatic Update\", class = \"btn-info btn-sm\"),       helpText(\"Updates Score column programmatically to test different source types\")     )   ) )  server <- function(input, output, session) {   # Reactive values to store change log   change_log <- reactiveVal(character(0))      # Render the handsontable   output$demo_table <- renderHandsontable({     handsontable(sample_data) |>       hot_col(col = 1, readOnly = TRUE, width = 60) |>       hot_col(col = 3, type = \"numeric\", format = \"0\") |>       hot_col(col = 4, type = \"dropdown\", source = c(\"A\", \"B\", \"C\", \"D\", \"F\")) |>       hot_col(col = 5, type = \"checkbox\") |>       handsontable(undo = TRUE) |>       hot_context_menu()   })      # Observe changes in the handsontable   observeEvent(input$demo_table, {     if (is.null(input$demo_table)) {       return()     }      is_after_change <- identical(input$demo_table$event, \"afterChange\")     if (!is_after_change) {       return()     }      # Extract event details     event_type <- input$demo_table$event     source_type <- input$demo_table$source %||% \"unknown\"     changes <- input$demo_table$changes      if (!length(changes)) {       return()     }      # Format timestamp     timestamp <- format(Sys.time(), \"%H:%M:%S\")      # Format changes - each change is now a named object with 1-indexed values     change_details <- sapply(changes, function(change) {       row_idx <- change$row_idx # Already 1-indexed       col_idx <- change$col_idx # Already 1-indexed       old_val <- if (is.null(change$old_val)) {         \"NULL\"       } else {         as.character(change$old_val)       }       new_val <- if (is.null(change$new_val)) {         \"NULL\"       } else {         as.character(change$new_val)       }        sprintf(         \"  Row %d, Col %d: '%s' → '%s'\",         row_idx,         col_idx,         old_val,         new_val       )     })      # Create log entry     log_entry <- paste0(       \"[\",       timestamp,       \"] EVENT: \",       event_type,       \" | SOURCE: \",       source_type,       \"\\n\",       paste(change_details, collapse = \"\\n\")     )      # Add to log (keep last 10 entries)     current_log <- change_log()     new_log <- c(log_entry, current_log)     if (length(new_log) > 10) {       new_log <- new_log[1:10]     }     change_log(new_log)   })      # Display the change log   output$change_log <- renderText({     log_entries <- change_log()     if (length(log_entries) == 0) {       \"No changes yet. Try editing some cells!\"     } else {       paste(log_entries, collapse = \"\\n\\n---\\n\\n\")     }   })      # Display current data structure   output$data_structure <- renderText({     if (!is.null(input$demo_table) && !is.null(input$demo_table$data)) {       current_data <- hot_to_r(input$demo_table)       paste(         \"Dimensions:\", nrow(current_data), \"rows ×\", ncol(current_data), \"columns\\n\",         \"Column names:\", paste(names(current_data), collapse = \", \"), \"\\n\",         \"Last updated:\", format(Sys.time(), \"%H:%M:%S\")       )     } else {       \"No data available yet.\"     }   })      # Clear log button   observeEvent(input$clear_log, {     change_log(character(0))   })      # Programmatic update button - demonstrates different source types   observeEvent(input$programmatic_update, {     # Update some cells programmatically using set_data     new_scores <- sample(70:100, 2)     set_data(\"demo_table\", row = c(2, 4), col = 3, val = new_scores)          showNotification(       paste(\"Updated scores for rows 2 and 4 to:\", paste(new_scores, collapse = \", \")),       type = \"message\",       duration = 3     )   }) }  shinyApp(ui, server)"},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"afterselection-hook","dir":"Articles","previous_headings":"Shiny Integration > Event Hooks","what":"afterSelection Hook","title":"Shiny Integration","text":"afterSelection hook fires users select cells ranges table.","code":"library(shiny) library(handsontable)  ui <- fluidPage(   titlePanel(\"afterSelection Hook Demo\"),      fluidRow(     column(8,       h4(\"Select cells to see selection details\"),       p(\"Try selecting single cells, ranges, or multiple selections:\"),       handsontableOutput(\"selection_table\", height = \"300px\")     ),          column(4,       h4(\"Selection Information\"),       verbatimTextOutput(\"selection_info\"),              br(),       h4(\"Selected Data\"),       p(\"Data from currently selected cells:\"),       tableOutput(\"selected_data\")     )   ) )  server <- function(input, output, session) {   # Sample data   table_data <- data.frame(     Product = c(\"Widget A\", \"Widget B\", \"Widget C\", \"Widget D\", \"Widget E\"),     Category = c(\"Electronics\", \"Toys\", \"Electronics\", \"Books\", \"Toys\"),     Price = c(25.99, 12.50, 45.00, 18.99, 8.75),     Stock = c(100, 250, 75, 180, 320),     Supplier = c(\"Acme Corp\", \"Toy Co\", \"Acme Corp\", \"Book Inc\", \"Toy Co\")   )      output$selection_table <- renderHandsontable({     handsontable(table_data) |>       hot_col(col = 3, type = \"numeric\", format = \"$0.00\") |>       hot_col(col = 4, type = \"numeric\", format = \"0,0\") |>       handsontable() |>       hot_context_menu()   })      # Display selection information   output$selection_info <- renderText({     if (is.null(input$selection_table_select)) {       \"No selection made yet\"     } else {       sel <- input$selection_table_select              # Selection coordinates are now 1-indexed       start_row <- sel$row_idx       start_col <- sel$col_idx       end_row <- sel$row2_idx       end_col <- sel$col2_idx              if (start_row == end_row && start_col == end_col) {         paste0(           \"Single cell selected:\\n\",           \"Row: \", start_row, \", Column: \", start_col, \"\\n\",           \"Value: \", table_data[start_row, start_col]         )       } else {         paste0(           \"Range selected:\\n\",           \"From Row \", start_row, \", Col \", start_col, \"\\n\",           \"To Row \", end_row, \", Col \", end_col, \"\\n\",           \"Total cells: \", (end_row - start_row + 1) * (end_col - start_col + 1)         )       }     }   })      # Display selected data   output$selected_data <- renderTable({     if (is.null(input$selection_table_select)) {       data.frame(Message = \"No selection\")     } else {       sel <- input$selection_table_select              # Selection coordinates are now 1-indexed       start_row <- sel$row_idx       start_col <- sel$col_idx       end_row <- sel$row2_idx       end_col <- sel$col2_idx              # Extract selected data       selected_data <- table_data[start_row:end_row, start_col:end_col, drop = FALSE]       selected_data     }   }) }  shinyApp(ui, server)"},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"aftercreaterow-hook","dir":"Articles","previous_headings":"Shiny Integration > Event Hooks","what":"afterCreateRow Hook","title":"Shiny Integration","text":"afterCreateRow hook fires new rows added table.","code":"library(shiny) library(handsontable)  ui <- fluidPage(   titlePanel(\"afterCreateRow Hook Demo\"),      fluidRow(     column(8,       h4(\"Right-click and insert rows to see the hook in action\"),       p(\"Use the context menu to add new rows:\"),       handsontableOutput(\"create_row_table\", height = \"300px\")     ),          column(4,       h4(\"Row Creation Log\"),       verbatimTextOutput(\"row_create_log\"),              br(),       actionButton(\"clear_row_log\", \"Clear Log\", class = \"btn-warning btn-sm\"),              br(), br(),       h4(\"Current Row Count\"),       textOutput(\"row_count\")     )   ) )  server <- function(input, output, session) {   # Initial data   initial_data <- data.frame(     Task = c(\"Task 1\", \"Task 2\", \"Task 3\"),     Status = c(\"Pending\", \"In Progress\", \"Completed\"),     Priority = c(\"High\", \"Medium\", \"Low\"),     Assigned = c(\"Alice\", \"Bob\", \"Charlie\")   )      # Reactive values   row_create_log <- reactiveVal(character(0))      output$create_row_table <- renderHandsontable({     handsontable(initial_data) |>       hot_col(col = 2, type = \"dropdown\", source = c(\"Pending\", \"In Progress\", \"Completed\")) |>       hot_col(col = 3, type = \"dropdown\", source = c(\"High\", \"Medium\", \"Low\")) |>       handsontable() |>       hot_context_menu()   })      # Observe table changes   observeEvent(input$create_row_table, {     if (is.null(input$create_row_table)) {       return()     }      is_after_create_row <- identical(input$create_row_table$event, \"afterCreateRow\")     if (!is_after_create_row) {       return()     }      # Extract event details     index <- input$create_row_table$index  # Already 1-indexed     amount <- input$create_row_table$amount      # Create log entry     timestamp <- format(Sys.time(), \"%H:%M:%S\")     log_entry <- paste0(       \"[\", timestamp, \"] EVENT: afterCreateRow\\n\",       \"  Inserted \", amount, \" row(s) at position \", index     )      # Add to log     current_log <- row_create_log()     new_log <- c(log_entry, current_log)     if (length(new_log) > 10) {       new_log <- new_log[1:10]     }     row_create_log(new_log)   })      # Display creation log   output$row_create_log <- renderText({     log_entries <- row_create_log()     if (length(log_entries) == 0) {       \"No rows created yet. Right-click and select 'Insert row above/below'.\"     } else {       paste(log_entries, collapse = \"\\n\\n---\\n\\n\")     }   })      # Clear log button   observeEvent(input$clear_row_log, {     row_create_log(character(0))   })      # Display current row count   output$row_count <- renderText({     if (!is.null(input$create_row_table) && !is.null(input$create_row_table$data)) {       paste(\"Current rows:\", length(input$create_row_table$data))     } else {       paste(\"Current rows:\", nrow(initial_data))     }   }) }  shinyApp(ui, server)"},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"afterremoverow-hook","dir":"Articles","previous_headings":"Shiny Integration > Event Hooks","what":"afterRemoveRow Hook","title":"Shiny Integration","text":"afterRemoveRow hook fires rows deleted table.","code":"library(shiny) library(handsontable)  ui <- fluidPage(   titlePanel(\"afterRemoveRow Hook Demo\"),      fluidRow(     column(8,       h4(\"Right-click and remove rows to see the hook in action\"),       p(\"Use the context menu to delete rows:\"),       handsontableOutput(\"remove_row_table\", height = \"300px\")     ),          column(4,       h4(\"Row Deletion Log\"),       verbatimTextOutput(\"row_delete_log\"),              br(),       actionButton(\"clear_delete_log\", \"Clear Log\", class = \"btn-warning btn-sm\"),              br(), br(),       h4(\"Deletion Summary\"),       verbatimTextOutput(\"delete_summary\")     )   ) )  server <- function(input, output, session) {   # Initial data with more rows for deletion testing   initial_data <- data.frame(     ID = 1:8,     Employee = paste(\"Employee\", 1:8),     Department = sample(c(\"IT\", \"HR\", \"Finance\", \"Marketing\"), 8, replace = TRUE),     Salary = sample(40000:80000, 8),     Active = sample(c(TRUE, FALSE), 8, replace = TRUE)   )      # Reactive values   row_delete_log <- reactiveVal(character(0))   delete_count <- reactiveVal(0)      output$remove_row_table <- renderHandsontable({     handsontable(initial_data) |>       hot_col(col = 1, readOnly = TRUE) |>       hot_col(col = 3, type = \"dropdown\", source = c(\"IT\", \"HR\", \"Finance\", \"Marketing\")) |>       hot_col(col = 4, type = \"numeric\", format = \"$0,0\") |>       hot_col(col = 5, type = \"checkbox\") |>       handsontable() |>       hot_context_menu()   })      # Observe table changes   observeEvent(input$remove_row_table, {     if (is.null(input$remove_row_table)) {       return()     }      is_after_remove_row <- identical(input$remove_row_table$event, \"afterRemoveRow\")     if (!is_after_remove_row) {       return()     }      # Extract event details     index <- input$remove_row_table$index # Already 1-indexed     amount <- input$remove_row_table$amount      # Update delete count     delete_count(delete_count() + amount)      # Create log entry     timestamp <- format(Sys.time(), \"%H:%M:%S\")     log_entry <- paste0(       \"[\", timestamp, \"] EVENT: afterRemoveRow\\n\",       \"  Removed \", amount, \" row(s) starting at position \", index, \"\\n\",       \"  Total rows remaining: \", length(input$remove_row_table$data)     )      # Add to log     current_log <- row_delete_log()     new_log <- c(log_entry, current_log)     if (length(new_log) > 10) {       new_log <- new_log[1:10]     }     row_delete_log(new_log)   })      # Display deletion log   output$row_delete_log <- renderText({     log_entries <- row_delete_log()     if (length(log_entries) == 0) {       \"No rows deleted yet. Right-click and select 'Delete row'.\"     } else {       paste(log_entries, collapse = \"\\n\\n---\\n\\n\")     }   })      # Clear log button   observeEvent(input$clear_delete_log, {     row_delete_log(character(0))     delete_count(0)   })      # Display deletion summary   output$delete_summary <- renderText({     current_rows <- if (!is.null(input$remove_row_table$data)) {       length(input$remove_row_table$data)     } else {       nrow(initial_data)     }          paste0(       \"Original rows: \", nrow(initial_data), \"\\n\",       \"Current rows: \", current_rows, \"\\n\",       \"Total deleted: \", delete_count(), \"\\n\",       \"Remaining: \", current_rows     )   }) }  shinyApp(ui, server)"},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"aftercreatecol-hook","dir":"Articles","previous_headings":"Shiny Integration > Event Hooks","what":"afterCreateCol Hook","title":"Shiny Integration","text":"afterCreateCol hook fires new columns added table.","code":"library(shiny) library(handsontable)  ui <- fluidPage(   titlePanel(\"afterCreateCol Hook Demo\"),      fluidRow(     column(8,       h4(\"Right-click and insert columns to see the hook in action\"),       p(\"Use the context menu to add new columns:\"),       handsontableOutput(\"create_col_table\", height = \"300px\")     ),          column(4,       h4(\"Column Creation Log\"),       verbatimTextOutput(\"col_create_log\"),              br(),       actionButton(\"clear_col_log\", \"Clear Log\", class = \"btn-warning btn-sm\"),              br(), br(),       h4(\"Column Information\"),       verbatimTextOutput(\"col_info\")     )   ) )  server <- function(input, output, session) {   # Initial data   initial_data <- data.frame(     Name = c(\"Alice\", \"Bob\", \"Charlie\"),     Age = c(25, 30, 35),     City = c(\"New York\", \"London\", \"Tokyo\")   )      # Reactive values   col_create_log <- reactiveVal(character(0))      output$create_col_table <- renderHandsontable({     handsontable(initial_data) |>       hot_col(col = 2, type = \"numeric\") |>       handsontable() |>       hot_context_menu()   })      # Observe table changes   observeEvent(input$create_col_table, {     if (is.null(input$create_col_table)) {       return()     }      is_after_create_col <- identical(input$create_col_table$event, \"afterCreateCol\")     if (!is_after_create_col) {       return()     }      # Extract event details     index <- input$create_col_table$index # Already 1-indexed     amount <- input$create_col_table$amount     colnames <- input$create_col_table$colnames      # Create log entry     timestamp <- format(Sys.time(), \"%H:%M:%S\")     log_entry <- paste0(       \"[\", timestamp, \"] EVENT: afterCreateCol\\n\",       \"  Inserted \", amount, \" column(s) at position \", index, \"\\n\",       \"  New column names: \", paste(colnames[index:(index + amount - 1)], collapse = \", \")     )      # Add to log     current_log <- col_create_log()     new_log <- c(log_entry, current_log)     if (length(new_log) > 10) {       new_log <- new_log[1:10]     }     col_create_log(new_log)   })      # Display creation log   output$col_create_log <- renderText({     log_entries <- col_create_log()     if (length(log_entries) == 0) {       \"No columns created yet. Right-click and select 'Insert column left/right'.\"     } else {       paste(log_entries, collapse = \"\\n\\n---\\n\\n\")     }   })      # Clear log button   observeEvent(input$clear_col_log, {     col_create_log(character(0))   })      # Display column information   output$col_info <- renderText({     if (!is.null(input$create_col_table) && !is.null(input$create_col_table$colnames)) {       colnames <- input$create_col_table$colnames       paste0(         \"Current columns: \", length(colnames), \"\\n\",         \"Column names: \", paste(colnames, collapse = \", \")       )     } else {       paste0(         \"Current columns: \", ncol(initial_data), \"\\n\",         \"Column names: \", paste(names(initial_data), collapse = \", \")       )     }   }) }  shinyApp(ui, server)"},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"afterremovecol-hook","dir":"Articles","previous_headings":"Shiny Integration > Event Hooks","what":"afterRemoveCol Hook","title":"Shiny Integration","text":"afterRemoveCol hook fires columns deleted table.","code":"library(shiny) library(handsontable)  ui <- fluidPage(   titlePanel(\"afterRemoveCol Hook Demo\"),      fluidRow(     column(8,       h4(\"Right-click and remove columns to see the hook in action\"),       p(\"Use the context menu to delete columns:\"),       handsontableOutput(\"remove_col_table\", height = \"300px\")     ),          column(4,       h4(\"Column Deletion Log\"),       verbatimTextOutput(\"col_delete_log\"),              br(),       actionButton(\"clear_col_delete_log\", \"Clear Log\", class = \"btn-warning btn-sm\"),              br(), br(),       h4(\"Column Summary\"),       verbatimTextOutput(\"col_delete_summary\")     )   ) )  server <- function(input, output, session) {   # Initial data with more columns for deletion testing   initial_data <- data.frame(     ID = 1:5,     Name = paste(\"Person\", 1:5),     Age = sample(25:45, 5),     Department = sample(c(\"IT\", \"HR\", \"Finance\"), 5, replace = TRUE),     Salary = sample(40000:80000, 5),     Bonus = sample(1000:5000, 5),     Active = sample(c(TRUE, FALSE), 5, replace = TRUE)   )      # Reactive values   col_delete_log <- reactiveVal(character(0))   original_col_names <- names(initial_data)      output$remove_col_table <- renderHandsontable({     handsontable(initial_data) |>       hot_col(col = 1, readOnly = TRUE) |>       hot_col(col = 3, type = \"numeric\") |>       hot_col(col = 4, type = \"dropdown\", source = c(\"IT\", \"HR\", \"Finance\")) |>       hot_col(col = 5, type = \"numeric\", format = \"$0,0\") |>       hot_col(col = 6, type = \"numeric\", format = \"$0,0\") |>       hot_col(col = 7, type = \"checkbox\") |>       handsontable() |>       hot_context_menu()   })      # Observe table changes   observeEvent(input$remove_col_table, {     if (is.null(input$remove_col_table)) {       return()     }      is_after_remove_col <- identical(input$remove_col_table$event, \"afterRemoveCol\")     if (!is_after_remove_col) {       return()     }      # Extract event details     index <- input$remove_col_table$index # Already 1-indexed     amount <- input$remove_col_table$amount     remaining_colnames <- input$remove_col_table$colnames      # Create log entry     timestamp <- format(Sys.time(), \"%H:%M:%S\")     log_entry <- paste0(       \"[\", timestamp, \"] EVENT: afterRemoveCol\\n\",       \"  Removed \", amount, \" column(s) starting at position \", index, \"\\n\",       \"  Remaining columns: \", length(remaining_colnames), \"\\n\",       \"  Column names: \", paste(remaining_colnames, collapse = \", \")     )      # Add to log     current_log <- col_delete_log()     new_log <- c(log_entry, current_log)     if (length(new_log) > 10) {       new_log <- new_log[1:10]     }     col_delete_log(new_log)   })      # Display deletion log   output$col_delete_log <- renderText({     log_entries <- col_delete_log()     if (length(log_entries) == 0) {       \"No columns deleted yet. Right-click and select 'Delete column'.\"     } else {       paste(log_entries, collapse = \"\\n\\n---\\n\\n\")     }   })      # Clear log button   observeEvent(input$clear_col_delete_log, {     col_delete_log(character(0))   })      # Display deletion summary   output$col_delete_summary <- renderText({     current_cols <- if (!is.null(input$remove_col_table$colnames)) {       input$remove_col_table$colnames     } else {       original_col_names     }          deleted_count <- length(original_col_names) - length(current_cols)          paste0(       \"Original columns: \", length(original_col_names), \"\\n\",       \"Current columns: \", length(current_cols), \"\\n\",       \"Deleted columns: \", deleted_count, \"\\n\",       \"Remaining: \", paste(current_cols, collapse = \", \")     )   }) }  shinyApp(ui, server)"},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"hook-event-summary","dir":"Articles","previous_headings":"Shiny Integration > Event Hooks","what":"Hook Event Summary","title":"Shiny Integration","text":"hooks provide consistent event information: event: hook name (e.g., “afterChange”, “afterSelection”) data: Current table data colnames: Current column names Hook-specific parameters: Additional context like changes, source, index, amount, etc. event system allows create sophisticated reactive applications respond precisely user interactions handsontables. covers essential patterns using handsontables Shiny applications. next vignette cover data validation advanced customization options.","code":""},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"editable-table-with-validation","dir":"Articles","previous_headings":"Shiny Integration > Interactive Data Editing","what":"Editable Table with Validation","title":"Shiny Integration","text":"","code":"library(shiny) library(handsontable)  ui <- fluidPage(   titlePanel(\"Editable Table with Validation\"),   handsontableOutput(\"table\"),   br(),   actionButton(\"save\", \"Save Changes\", class = \"btn-primary\"),   actionButton(\"reset\", \"Reset Data\", class = \"btn-warning\"),   br(),   br(),   verbatimTextOutput(\"status\") )  server <- function(input, output, session) {   # Original data   original_data <- data.frame(     ID = 1:5,     Name = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eve\"),     Email = c(       \"alice@company.com\",       \"bob@company.com\",       \"charlie@company.com\",       \"diana@company.com\",       \"eve@company.com\"     ),     Salary = c(50000, 60000, 55000, 65000, 58000),     Department = c(\"IT\", \"HR\", \"IT\", \"Finance\", \"HR\")   )    # Current working data   current_data <- reactiveVal(original_data)    output$table <- renderHandsontable({     handsontable(current_data()) |>       hot_col(col = 1, readOnly = TRUE) |> # ID is read-only       hot_col(col = 2, type = \"text\") |>       hot_col(col = 3, type = \"text\") |>       hot_validate(         col = 3,         type = \"regexp\",         pattern = \"^[\\\\w\\\\._%+-]+@[\\\\w\\\\.-]+\\\\.[A-Za-z]{2,}$\"       ) |>       hot_col(col = 4, type = \"numeric\", format = \"$0,0\") |>       hot_validate(col = 4, type = \"numeric\", min = 30000, max = 100000) |>       hot_col(         col = 5,         type = \"dropdown\",         source = c(\"IT\", \"HR\", \"Finance\", \"Marketing\"),         strict = TRUE       ) |>       handsontable() |>       hot_context_menu()   })    # Update current data when table changes   observeEvent(input$table, {     if (!is.null(input$table)) {       current_data(hot_to_r(input$table))     }   })    # Save changes   observeEvent(input$save, {     # In a real app, you would save to database here     showNotification(\"Data saved successfully!\", type = \"success\")   })    # Reset to original data   observeEvent(input$reset, {     current_data(original_data)     showNotification(\"Data reset to original values\", type = \"info\")   })    output$status <- renderText({     data_changed <- !identical(current_data(), original_data)     if (data_changed) {       \"⚠️ Data has been modified\"     } else {       \"✅ Data matches original\"     }   }) }  shinyApp(ui, server)"},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"updating-cell-values","dir":"Articles","previous_headings":"Shiny Integration > Programmatic Updates","what":"Updating Cell Values","title":"Shiny Integration","text":"","code":"library(shiny) library(handsontable)  ui <- fluidPage(   titlePanel(\"Programmatic Updates\"),   fluidRow(     column(6, handsontableOutput(\"table\")),     column(       6,       h4(\"Update Controls\"),       numericInput(\"row\", \"Row:\", value = 1, min = 1, max = 5),       numericInput(\"col\", \"Column:\", value = 1, min = 1, max = 3),       textInput(\"value\", \"New Value:\", value = \"\"),       actionButton(\"update\", \"Update Cell\"),       br(),       br(),       actionButton(\"random\", \"Fill Random Data\"),       actionButton(\"clear\", \"Clear All\")     )   ) )  server <- function(input, output, session) {   table_data <- reactiveVal(data.frame(     A = rep(\"\", 5),     B = rep(\"\", 5),     C = rep(\"\", 5)   ))    output$table <- renderHandsontable({     handsontable(table_data())   })    # Update specific cell   observeEvent(input$update, {     req(input$row, input$col, input$value)     set_data(\"table\", input$row, input$col, input$value)   })    # Fill with random data   observeEvent(input$random, {     new_data <- data.frame(       A = sample(letters[1:10], 5, replace = TRUE),       B = sample(1:100, 5),       C = sample(c(\"X\", \"Y\", \"Z\"), 5, replace = TRUE)     )     table_data(new_data)   })    # Clear all data   observeEvent(input$clear, {     table_data(data.frame(       A = rep(\"\", 5),       B = rep(\"\", 5),       C = rep(\"\", 5)     ))   })    # Track changes   observeEvent(input$table, {     if (!is.null(input$table)) {       table_data(hot_to_r(input$table))     }   }) }  shinyApp(ui, server)"},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"master-detail-views","dir":"Articles","previous_headings":"Shiny Integration > Advanced Shiny Patterns","what":"Master-Detail Views","title":"Shiny Integration","text":"","code":"library(shiny) library(handsontable)  ui <- fluidPage(   titlePanel(\"Master-Detail Pattern\"),   fluidRow(     column(8, h4(\"Employees\"), handsontableOutput(\"employees\")),     column(4, h4(\"Selected Employee Details\"), uiOutput(\"employee_details\"))   ) )  server <- function(input, output, session) {   employees <- data.frame(     ID = 1:10,     Name = paste(\"Employee\", 1:10),     Department = sample(c(\"IT\", \"HR\", \"Finance\"), 10, replace = TRUE),     Salary = sample(40000:80000, 10)   )    output$employees <- renderHandsontable({     handsontable(employees) |>       hot_col(col = 1, readOnly = TRUE) |>       hot_col(col = 4, type = \"numeric\", format = \"$0,0\") |>       handsontable() |>       hot_context_menu()   })    # Get selected employee   selected_employee <- reactive({     if (!is.null(input$employees_select)) {       row_index <- input$employees_select$row_idx # Already 1-indexed       if (row_index <= nrow(employees)) {         employees[row_index, ]       } else {         NULL       }     } else {       NULL     }   })    output$employee_details <- renderUI({     emp <- selected_employee()     if (is.null(emp)) {       p(\"Select an employee from the table\")     } else {       div(         h5(paste(\"Employee ID:\", emp$ID)),         p(strong(\"Name:\"), emp$Name),         p(strong(\"Department:\"), emp$Department),         p(strong(\"Salary:\"), scales::dollar(emp$Salary)),         br(),         actionButton(\"edit_emp\", \"Edit Employee\", class = \"btn-primary\")       )     }   }) }  shinyApp(ui, server)"},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"dynamic-column-generation","dir":"Articles","previous_headings":"Shiny Integration > Advanced Shiny Patterns","what":"Dynamic Column Generation","title":"Shiny Integration","text":"","code":"library(shiny) library(handsontable)  ui <- fluidPage(   titlePanel(\"Dynamic Columns\"),   fluidRow(     column(       3,       h4(\"Controls\"),       numericInput(         \"num_cols\",         \"Number of Columns:\",         value = 3,         min = 1,         max = 10       ),       textInput(\"col_prefix\", \"Column Prefix:\", value = \"Col\"),       actionButton(\"generate\", \"Generate Table\")     ),     column(9, handsontableOutput(\"dynamic_table\"))   ) )  server <- function(input, output, session) {   table_data <- reactiveVal(NULL)    observeEvent(input$generate, {     num_cols <- input$num_cols     col_names <- paste0(input$col_prefix, 1:num_cols)      # Generate random data     new_data <- data.frame(       matrix(         sample(1:100, 50 * num_cols, replace = TRUE),         nrow = 50,         ncol = num_cols       )     )     names(new_data) <- col_names      table_data(new_data)   })    output$dynamic_table <- renderHandsontable({     req(table_data())      ht <- handsontable(table_data()) |>       handsontable(         contextMenu = TRUE,         filters = TRUE,         manualColumnSorting = TRUE       )      # Configure each column as numeric     for (i in seq_len(ncol(table_data()))) {       ht <- ht |> hot_col(col = i, type = \"numeric\", format = \"0,0\")     }      ht   })    # Initialize with default table   observeEvent(     TRUE,     {       table_data(data.frame(         Col1 = 1:10,         Col2 = 11:20,         Col3 = 21:30       ))     },     once = TRUE   ) }  shinyApp(ui, server)"},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"debouncing-changes","dir":"Articles","previous_headings":"Shiny Integration > Performance Tips for Shiny","what":"1. Debouncing Changes","title":"Shiny Integration","text":"large tables, consider debouncing change events:","code":"# Use a reactive timer to batch updates values <- reactiveValues(data = NULL, last_update = Sys.time())  observe({   invalidateLater(500) # Check every 500ms    if (     !is.null(input$table) &&       difftime(Sys.time(), values$last_update, units = \"secs\") > 0.5   ) {     values$data <- hot_to_r(input$table)     values$last_update <- Sys.time()   } })"},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"selective-updates","dir":"Articles","previous_headings":"Shiny Integration > Performance Tips for Shiny","what":"2. Selective Updates","title":"Shiny Integration","text":"update ’s necessary:","code":"observeEvent(input$table, {   # Only process if data actually changed   new_data <- hot_to_r(input$table)   if (!identical(new_data, previous_data())) {     # Process changes     previous_data(new_data)   } })"},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"large-dataset-handling","dir":"Articles","previous_headings":"Shiny Integration > Performance Tips for Shiny","what":"3. Large Dataset Handling","title":"Shiny Integration","text":"large datasets:","code":"# Use server-side filtering and pagination # Limit initial display to reasonable size display_data <- reactive({   full_data()[1:min(1000, nrow(full_data())), ] })  output$table <- renderHandsontable({   handsontable(display_data()) |>     handsontable(       filters = FALSE, # Disable client-side filtering       manualColumnSorting = FALSE # Handle sorting server-side     ) })"},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/shiny-integration.html","id":"with-dt-package","dir":"Articles","previous_headings":"Shiny Integration > Integration with Other Packages","what":"With DT Package","title":"Shiny Integration","text":"","code":"# Use handsontable for editing, DT for display library(shiny) library(handsontable) library(DT)  # In UI fluidPage(   tabsetPanel(     tabPanel(\"Edit\", handsontableOutput(\"edit_table\")),     tabPanel(\"View\", DT::dataTableOutput(\"view_table\"))   ) )  # In server shared_data <- reactiveVal(mtcars)  output$edit_table <- renderHandsontable({   handsontable(shared_data()) })  output$view_table <- DT::renderDataTable({   DT::datatable(shared_data(), options = list(pageLength = 25)) })  observeEvent(input$edit_table, {   if (!is.null(input$edit_table)) {     shared_data(hot_to_r(input$edit_table))   } })"},{"path":"https://kennedymwavu.github.io/handsontable/articles/validation-and-customization.html","id":"complete-cell-type-support","dir":"Articles","previous_headings":"","what":"Complete Cell Type Support","title":"Data Validation and Cell Types","text":"Handsontable R now supports 10 cell types Handsontable JS v6.2.2 full validation customization options.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/validation-and-customization.html","id":"all-available-cell-types","dir":"Articles","previous_headings":"Complete Cell Type Support","what":"All Available Cell Types","title":"Data Validation and Cell Types","text":"","code":"# Demonstrate all cell types in one table demo_data <- data.frame(   text_col = c(\"Hello\", \"World\", \"Text\"),   numeric_col = c(1234.56, 2345.67, 3456.78),   date_col = as.Date(c(\"2024-01-01\", \"2024-02-01\", \"2024-03-01\")),   time_col = c(\"14:30:00\", \"09:15:30\", \"18:45:15\"),   dropdown_col = c(\"Option A\", \"Option B\", \"Option C\"),   autocomplete_col = c(\"Apple\", \"Banana\", \"Cherry\"),   checkbox_col = c(TRUE, FALSE, TRUE),   password_col = c(\"secret123\", \"hidden456\", \"private789\"),   stringsAsFactors = FALSE )  handsontable(demo_data) |>   hot_col(col = 1, type = \"text\") |>   hot_col(col = 2, type = \"numeric\", numericFormat = list(pattern = \"$0,0.00\")) |>   hot_col(col = 3, type = \"date\", dateFormat = \"YYYY-MM-DD\") |>   hot_col(col = 4, type = \"time\") |>   hot_col(col = 5, type = \"dropdown\", source = c(\"Option A\", \"Option B\", \"Option C\", \"Option D\")) |>   hot_col(     col = 6, type = \"autocomplete\",     source = c(\"Apple\", \"Banana\", \"Cherry\", \"Date\", \"Elderberry\"),     filter = TRUE, trimDropdown = TRUE   ) |>   hot_col(col = 7, type = \"checkbox\") |>   hot_col(col = 8, type = \"password\", copyable = FALSE)"},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/validation-and-customization.html","id":"advanced-number-patterns","dir":"Articles","previous_headings":"Enhanced Numeric Formatting","what":"Advanced Number Patterns","title":"Data Validation and Cell Types","text":"","code":"financial_data <- data.frame(   Product = c(\"Widget A\", \"Widget B\", \"Widget C\"),   Price = c(1234.56, 9876.54, 5432.10),   Discount = c(0.15, 0.08, 0.22),   Quantity = c(1000, 2500, 750),   Revenue = c(1049376, 9047580, 4237478) )  handsontable(financial_data) |>   hot_col(col = 2, type = \"numeric\", numericFormat = list(pattern = \"$0,0.00\")) |>   hot_col(col = 3, type = \"numeric\", numericFormat = list(pattern = \"0.0%\")) |>   hot_col(col = 4, type = \"numeric\", numericFormat = list(pattern = \"0,0\")) |>   hot_col(col = 5, type = \"numeric\", numericFormat = list(pattern = \"$0.0a\"))"},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/validation-and-customization.html","id":"filtered-autocomplete-with-custom-options","dir":"Articles","previous_headings":"Smart Autocomplete Features","what":"Filtered Autocomplete with Custom Options","title":"Data Validation and Cell Types","text":"","code":"inventory_data <- data.frame(   Category = c(\"Electronics\", \"Clothing\", \"Books\"),   Product = c(\"Laptop\", \"T-Shirt\", \"Novel\"),   Supplier = c(\"TechCorp\", \"FashionInc\", \"BookHouse\") )  handsontable(inventory_data) |>   hot_col(     col = 1, type = \"autocomplete\",     source = c(\"Electronics\", \"Clothing\", \"Books\", \"Home & Garden\", \"Sports\", \"Automotive\"),     filter = TRUE,     trimDropdown = TRUE,     allowEmpty = FALSE   ) |>   hot_col(     col = 3, type = \"autocomplete\",     source = c(\"TechCorp\", \"FashionInc\", \"BookHouse\", \"GlobalSupply\", \"LocalVendor\", \"DirectManufacturer\"),     filter = TRUE,     strict = FALSE   )"},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/validation-and-customization.html","id":"enhanced-date-picker","dir":"Articles","previous_headings":"Date and Time Configuration","what":"Enhanced Date Picker","title":"Data Validation and Cell Types","text":"","code":"schedule_data <- data.frame(   Event = c(\"Meeting\", \"Presentation\", \"Workshop\"),   Start_Date = as.Date(c(\"2024-01-15\", \"2024-02-20\", \"2024-03-10\")),   End_Date = as.Date(c(\"2024-01-15\", \"2024-02-21\", \"2024-03-12\")),   Time = c(\"09:00\", \"14:30\", \"10:00\") )  handsontable(schedule_data) |>   hot_col(     col = 2, type = \"date\",     dateFormat = \"YYYY-MM-DD\",     defaultDate = \"2024-01-01\"   ) |>   hot_col(     col = 3, type = \"date\",     dateFormat = \"YYYY-MM-DD\"   ) |>   hot_col(col = 4, type = \"time\")"},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/validation-and-customization.html","id":"all-validation-types","dir":"Articles","previous_headings":"Comprehensive Validation System","what":"All Validation Types","title":"Data Validation and Cell Types","text":"","code":"# Employee data with all validation types employee_data <- data.frame(   ID = c(\"EMP001\", \"EMP002\", \"EMP003\"),   Name = c(\"John Doe\", \"Jane Smith\", \"Bob Johnson\"),   Salary = c(75000, 82000, 69000),   Department = c(\"Engineering\", \"Marketing\", \"Sales\"),   Email = c(\"john@company.com\", \"jane@company.com\", \"bob@company.com\"),   Phone = c(\"555-123-4567\", \"555-987-6543\", \"555-555-0123\"),   Rating = c(4.5, 3.8, 4.2),   Active = c(TRUE, TRUE, FALSE) )  handsontable(employee_data) |>   # Column types   hot_col(col = 1, type = \"text\") |>   hot_col(col = 2, type = \"text\") |>   hot_col(col = 3, type = \"numeric\", numericFormat = list(pattern = \"$0,0\")) |>   hot_col(     col = 4, type = \"dropdown\",     source = c(\"Engineering\", \"Marketing\", \"Sales\", \"HR\", \"Finance\")   ) |>   hot_col(col = 5, type = \"text\") |>   hot_col(col = 6, type = \"text\") |>   hot_col(col = 7, type = \"numeric\", numericFormat = list(pattern = \"0.0\")) |>   hot_col(col = 8, type = \"checkbox\") |>   # Validation rules   hot_validate(cols = 1, type = \"regexp\", pattern = \"^EMP\\\\d{3}$\") |>   hot_validate(cols = 3, type = \"numeric\", min = 30000, max = 200000) |>   hot_validate(     cols = 4, type = \"list\",     source = c(\"Engineering\", \"Marketing\", \"Sales\", \"HR\", \"Finance\")   ) |>   hot_validate(     cols = 5, type = \"regexp\",     pattern = \"^[\\\\w\\\\._%+-]+@[\\\\w\\\\.-]+\\\\.[A-Za-z]{2,}$\"   ) |>   hot_validate(cols = 6, type = \"regexp\", pattern = \"^\\\\d{3}-\\\\d{3}-\\\\d{4}$\") |>   hot_validate(cols = 7, type = \"numeric\", min = 1.0, max = 5.0)"},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/validation-and-customization.html","id":"password-column-with-security-options","dir":"Articles","previous_headings":"Password and Security","what":"Password Column with Security Options","title":"Data Validation and Cell Types","text":"","code":"user_data <- data.frame(   Username = c(\"admin\", \"user1\", \"user2\"),   Password = c(\"admin123\", \"pass456\", \"secret789\"),   Role = c(\"Administrator\", \"User\", \"Guest\"),   Access_Level = c(3, 2, 1) )  handsontable(user_data) |>   hot_col(col = 2, type = \"password\", copyable = FALSE) |>   hot_col(     col = 3, type = \"dropdown\",     source = c(\"Administrator\", \"User\", \"Guest\", \"Moderator\")   ) |>   hot_col(col = 4, type = \"numeric\") |>   hot_validate(cols = 4, type = \"numeric\", min = 1, max = 5)"},{"path":"https://kennedymwavu.github.io/handsontable/articles/validation-and-customization.html","id":"complete-example-order-management","dir":"Articles","previous_headings":"","what":"Complete Example: Order Management","title":"Data Validation and Cell Types","text":"","code":"# Real-world order management example order_data <- data.frame(   Order_ID = c(\"ORD-001\", \"ORD-002\", \"ORD-003\"),   Customer = c(\"TechCorp Inc\", \"StartupXYZ\", \"Enterprise Ltd\"),   Product = c(\"Premium License\", \"Basic Package\", \"Enterprise Suite\"),   Quantity = c(50, 100, 25),   Unit_Price = c(199.99, 99.99, 999.99),   Discount = c(0.10, 0.05, 0.15),   Order_Date = as.Date(c(\"2024-01-15\", \"2024-01-20\", \"2024-01-25\")),   Delivery_Date = as.Date(c(\"2024-01-30\", \"2024-02-05\", \"2024-02-10\")),   Status = c(\"Processing\", \"Shipped\", \"Delivered\"),   Priority = c(\"High\", \"Medium\", \"Critical\"),   Notes = c(\"Rush order\", \"Standard delivery\", \"VIP customer\"),   Confirmed = c(TRUE, TRUE, FALSE) )  handsontable(order_data, height = \"400px\") |>   # Column configurations with all features   hot_col(col = 1, type = \"text\", readOnly = TRUE, width = 80) |>   hot_col(     col = 2,     type = \"autocomplete\",     source = c(       \"TechCorp Inc\",       \"StartupXYZ\",       \"Enterprise Ltd\",       \"NewClient Co\",       \"BigCorp\"     ),     filter = TRUE,     trimDropdown = TRUE   ) |>   hot_col(     col = 3,     type = \"dropdown\",     source = c(       \"Premium License\",       \"Basic Package\",       \"Enterprise Suite\",       \"Starter Pack\"     )   ) |>   hot_col(col = 4, type = \"numeric\", numericFormat = list(pattern = \"0,0\")) |>   hot_col(     col = 5,     type = \"numeric\",     numericFormat = list(pattern = \"$0,0.00\")   ) |>   hot_col(col = 6, type = \"numeric\", numericFormat = list(pattern = \"0.0%\")) |>   hot_col(col = 7, type = \"date\", dateFormat = \"YYYY-MM-DD\") |>   hot_col(col = 8, type = \"date\", dateFormat = \"YYYY-MM-DD\") |>   hot_col(     col = 9,     type = \"dropdown\",     source = c(\"Processing\", \"Shipped\", \"Delivered\", \"Cancelled\", \"Pending\")   ) |>   hot_col(     col = 10,     type = \"dropdown\",     source = c(\"Low\", \"Medium\", \"High\", \"Critical\")   ) |>   hot_col(col = 11, type = \"text\", width = 150) |>   hot_col(col = 12, type = \"checkbox\") |>   # Comprehensive validation   hot_validate(cols = 1, type = \"regexp\", pattern = \"^ORD-\\\\d{3}$\") |>   hot_validate(cols = 4, type = \"numeric\", min = 1, max = 10000) |>   hot_validate(cols = 5, type = \"numeric\", min = 0.01, max = 99999.99) |>   hot_validate(cols = 6, type = \"numeric\", min = 0, max = 0.50) |>   hot_validate(     cols = 9,     type = \"list\",     source = c(\"Processing\", \"Shipped\", \"Delivered\", \"Cancelled\", \"Pending\")   ) |>   hot_validate(     cols = 10,     type = \"list\",     source = c(\"Low\", \"Medium\", \"High\", \"Critical\")   ) |>   # Table features   handsontable(     search = TRUE,     filters = TRUE,     manualColumnSorting = TRUE,     undo = TRUE,     manualColumnResize = TRUE,     fixedColumnsLeft = 1   ) |>   hot_context_menu()"},{"path":"https://kennedymwavu.github.io/handsontable/articles/validation-and-customization.html","id":"shiny-integration-example","dir":"Articles","previous_headings":"","what":"Shiny Integration Example","title":"Data Validation and Cell Types","text":"","code":"# Complete Shiny app with all cell types and validation ui <- fluidPage(   titlePanel(\"Complete Cell Types Demo\"),   fluidRow(     column(       12,       handsontableOutput(\"demo_table\"),       br(),       verbatimTextOutput(\"table_output\")     )   ) )  server <- function(input, output, session) {   # Sample data with all types   demo_data <- data.frame(     text_col = c(\"Sample\", \"Text\", \"Data\"),     numeric_col = c(1234.56, 2345.67, 3456.78),     date_col = as.Date(c(\"2024-01-01\", \"2024-02-01\", \"2024-03-01\")),     dropdown_col = c(\"A\", \"B\", \"C\"),     autocomplete_col = c(\"Apple\", \"Banana\", \"Cherry\"),     checkbox_col = c(TRUE, FALSE, TRUE),     password_col = c(\"secret1\", \"secret2\", \"secret3\"),     stringsAsFactors = FALSE   )    output$demo_table <- renderHandsontable({     handsontable(demo_data) |>       hot_col(col = 1, type = \"text\") |>       hot_col(         col = 2,         type = \"numeric\",         numericFormat = list(pattern = \"$0,0.00\")       ) |>       hot_col(col = 3, type = \"date\", dateFormat = \"YYYY-MM-DD\") |>       hot_col(col = 4, type = \"dropdown\", source = c(\"A\", \"B\", \"C\", \"D\")) |>       hot_col(         col = 6,         type = \"autocomplete\",         source = c(\"Apple\", \"Banana\", \"Cherry\", \"Date\", \"Elderberry\"),         filter = TRUE,         trimDropdown = TRUE       ) |>       hot_col(col = 6, type = \"checkbox\") |>       hot_col(col = 7, type = \"password\", copyable = FALSE) |>       hot_validate(cols = 2, type = \"numeric\", min = 0, max = 10000)   })    output$table_output <- renderText({     if (!is.null(input$demo_table)) {       paste(\"Table updated at:\", Sys.time())     }   }) }  shinyApp(ui, server)"},{"path":[]},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/articles/validation-and-customization.html","id":"validation-strategy","dir":"Articles","previous_headings":"Best Practices","what":"Validation Strategy","title":"Data Validation and Cell Types","text":"Start type-level validation using appropriate cell types Add hot_validate() business rules constraints Use allowInvalid = FALSE prevent invalid entries Combine multiple validation types comprehensive data quality","code":""},{"path":"https://kennedymwavu.github.io/handsontable/articles/validation-and-customization.html","id":"performance-tips","dir":"Articles","previous_headings":"Best Practices","what":"Performance Tips","title":"Data Validation and Cell Types","text":"Use filter = TRUE autocomplete large option lists Set trimDropdown = TRUE optimize screen space Apply readOnly = TRUE calculated system fields Use fixedColumnsLeft wide tables key identifier columns Start basic types validation, enhance advanced formatting features needed!","code":""},{"path":"https://kennedymwavu.github.io/handsontable/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kennedy Mwavu. Author, maintainer, copyright holder.            Maintainer/developer handsontable since 2025 Handsoncode sp. z o.o.. Contributor, copyright holder.           Handsontable library","code":""},{"path":"https://kennedymwavu.github.io/handsontable/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mwavu K (2025). handsontable: Interface 'Handsontable' JavaScript Data Grid v6.2.2. R package version 0.1.0, https://github.com/kennedymwavu/handsontable.","code":"@Manual{,   title = {handsontable: Interface to the 'Handsontable' JavaScript Data Grid v6.2.2},   author = {Kennedy Mwavu},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/kennedymwavu/handsontable}, }"},{"path":"https://kennedymwavu.github.io/handsontable/index.html","id":"handsontable","dir":"","previous_headings":"","what":"Interface to the Handsontable JavaScript Data Grid v6.2.2","title":"Interface to the Handsontable JavaScript Data Grid v6.2.2","text":"R interface Handsontable JavaScript library v6.2.2. Create interactive spreadsheet-like data grids data validation, sorting, filtering, seamless Shiny integration.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interface to the Handsontable JavaScript Data Grid v6.2.2","text":"","code":"# Install from GitHub devtools::install_github(\"kennedymwavu/handsontable\")"},{"path":"https://kennedymwavu.github.io/handsontable/index.html","id":"quick-example","dir":"","previous_headings":"","what":"Quick Example","title":"Interface to the Handsontable JavaScript Data Grid v6.2.2","text":"","code":"library(handsontable)  # Basic table handsontable(mtcars[1:5, 1:4])  # With validation and formatting handsontable(iris[1:8, ], search = TRUE) |>   hot_col(     col = 5,     type = \"dropdown\",     source = c(\"setosa\", \"versicolor\", \"virginica\")   ) |>   hot_validate(     cols = 1:4,     type = \"numeric\",     min = 0   ) |>   hot_context_menu()"},{"path":"https://kennedymwavu.github.io/handsontable/index.html","id":"shiny-integration","dir":"","previous_headings":"","what":"Shiny Integration","title":"Interface to the Handsontable JavaScript Data Grid v6.2.2","text":"","code":"library(shiny)  ui <- fluidPage(handsontableOutput(\"table\"))  server <- function(input, output) {   output$table <- renderHandsontable({     handsontable(iris[1:10, ]) |>       hot_context_menu()   })    observeEvent(input$table, {     # Detect changes     if (!is.null(input$table)) {       updated_data <- hot_to_r(data = input$table)       cat(\"Updated data:\\n\")       print(updated_data)       # Use updated_data...     }   }) }  shinyApp(ui, server)"},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/index.html","id":"rhandsontable","dir":"","previous_headings":"Similar Packages","what":"rhandsontable","title":"Interface to the Handsontable JavaScript Data Grid v6.2.2","text":"rhandsontable package provides R interface Handsontable valuable tool R community. However, hasn’t actively maintained recent years. handsontable package developed ensure active maintenance regular updates, bug fixes, feature enhancements community needs.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Interface to the Handsontable JavaScript Data Grid v6.2.2","text":"Getting Started Configuration Options Data Validation & Customization Shiny Integration Function Reference","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/handsontable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Handsontable Widget — handsontable","title":"Create a Handsontable Widget — handsontable","text":"Creates interactive data grid using Handsontable JavaScript library. widget provides spreadsheet-like functionality including data validation, conditional formatting, formulas, extensive customization options.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/handsontable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Handsontable Widget — handsontable","text":"","code":"handsontable(   data,   width = NULL,   height = NULL,   colHeaders = TRUE,   rowHeaders = TRUE,   readOnly = FALSE,   elementId = NULL,   colWidths = NULL,   fixedColumnsLeft = 0,   manualColumnResize = TRUE,   manualColumnMove = FALSE,   fixedRowsTop = 0,   fixedRowsBottom = 0,   manualRowResize = TRUE,   manualRowMove = FALSE,   stretchH = \"all\",   ... )"},{"path":"https://kennedymwavu.github.io/handsontable/reference/handsontable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Handsontable Widget — handsontable","text":"data data.frame, matrix, rectangular data structure width, height Widget dimensions. Can specified pixels (e.g., \"400px\") percentage (e.g., \"100 automatically determined. colHeaders Logical character vector. TRUE, shows default column headers. character vector, uses custom column names. rowHeaders Logical. TRUE, shows row numbers headers. readOnly Logical. TRUE, makes entire table read-. elementId Optional HTML element ID widget container colWidths Numeric vector single value column widths fixedColumnsLeft Number columns freeze left manualColumnResize Logical, enable manual column resizing manualColumnMove Logical, enable manual column reordering fixedRowsTop Number rows freeze top fixedRowsBottom Number rows freeze bottom manualRowResize Logical, enable manual row resizing manualRowMove Logical, enable manual row reordering stretchH `stretchH` option. ... Additional configuration options passed Handsontable","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/handsontable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Handsontable Widget — handsontable","text":"htmlwidget object rendering Handsontable","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/handsontable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Handsontable Widget — handsontable","text":"","code":"if (interactive()) {   # Basic usage   handsontable(mtcars)    # With custom headers   handsontable(iris, colHeaders = c(     \"S.Length\", \"S.Width\", \"P.Length\",     \"P.Width\", \"Species\"   ))    # Read-only table with context menu   handsontable(airquality, readOnly = TRUE) |>     hot_context_menu() }"},{"path":"https://kennedymwavu.github.io/handsontable/reference/handsontableOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Widget output function for use in Shiny — handsontableOutput","title":"Widget output function for use in Shiny — handsontableOutput","text":"Widget output function use Shiny","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/handsontableOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widget output function for use in Shiny — handsontableOutput","text":"","code":"handsontableOutput(outputId, width = \"100%\", height = \"100%\")"},{"path":"https://kennedymwavu.github.io/handsontable/reference/handsontableOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widget output function for use in Shiny — handsontableOutput","text":"outputId Output variable name width, height Widget dimensions","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/handsontableOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Widget output function for use in Shiny — handsontableOutput","text":"","code":"if (interactive()) {   library(shiny)    ui <- fluidPage(     titlePanel(\"Handsontable Example\"),     handsontableOutput(\"my_table\")   )    server <- function(input, output) {     output$my_table <- renderHandsontable({       handsontable(mtcars[1:5, 1:4])     })   }    shinyApp(ui, server) }"},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Individual Column — hot_col","title":"Configure Individual Column — hot_col","text":"Configure Individual Column","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Individual Column — hot_col","text":"","code":"hot_col(   hot,   col,   type = c(\"text\", \"numeric\", \"checkbox\", \"date\", \"time\", \"dropdown\", \"autocomplete\",     \"password\", \"select\", \"handsontable\"),   source = NULL,   strict = NULL,   readOnly = NULL,   width = NULL,   format = NULL,   dateFormat = NULL,   checkedTemplate = NULL,   uncheckedTemplate = NULL,   visibleRows = NULL,   allowInvalid = NULL,   trimDropdown = NULL,   filter = NULL,   allowEmpty = NULL,   copyable = NULL,   numericFormat = NULL,   correctFormat = NULL,   defaultDate = NULL,   datePickerConfig = NULL,   className = NULL,   hidden = FALSE,   ... )"},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Individual Column — hot_col","text":"hot handsontable widget object col Column name index configure type Column type: \"text\", \"numeric\", \"checkbox\", \"date\", \"time\", \"dropdown\", \"autocomplete\", \"password\", \"select\", \"handsontable\" source dropdown/autocomplete type, vector allowed values strict Logical, strict validation dropdowns/autocomplete readOnly Logical, make column read-width Column width pixels format numeric columns, number format dateFormat date columns, date format checkedTemplate checkbox columns, value checked uncheckedTemplate checkbox columns, value unchecked visibleRows dropdown type, number visible rows dropdown allowInvalid Logical, allow invalid values trimDropdown autocomplete, trim dropdown width fit content filter autocomplete, enable filtering dropdown options allowEmpty autocomplete, allow empty values copyable password type, allow copying values (default FALSE) numericFormat numeric type, advanced formatting options (list) correctFormat numeric type, auto-correct number format defaultDate date type, default date value datePickerConfig date type, date picker configuration (list) className CSS class name cells ... Additional column configuration options","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure Individual Column — hot_col","text":"Modified handsontable widget","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure Individual Column — hot_col","text":"","code":"if (interactive()) {   library(shiny)    ui <- fluidPage(     titlePanel(\"Individual Column Configuration\"),     handsontableOutput(\"table\")   )    server <- function(input, output, session) {     df <- data.frame(       ID = 1:5,       Name = c(\"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Eve\"),       Score = c(85.5, 92.3, 78.1, 95.7, 88.9),       Grade = c(\"B\", \"A\", \"C\", \"A\", \"B\"),       Active = c(TRUE, FALSE, TRUE, TRUE, FALSE)     )      output$table <- renderHandsontable({       handsontable(df) |>         hot_col(col = 1, readOnly = TRUE, width = 60) |>         hot_col(col = 3, type = \"numeric\", format = \"0.0\") |>         hot_col(           col = 4, type = \"dropdown\",           source = c(\"A\", \"B\", \"C\", \"D\", \"F\")         ) |>         hot_col(col = 5, type = \"checkbox\")     })   }    shinyApp(ui, server) }"},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_context_menu.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Context Menu — hot_context_menu","title":"Configure Context Menu — hot_context_menu","text":"Configure Context Menu","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_context_menu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Context Menu — hot_context_menu","text":"","code":"hot_context_menu(hot, opts = NULL, customOpts = NULL)"},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_context_menu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Context Menu — hot_context_menu","text":"hot handsontable widget object opts Character vector built-context menu options. NULL, uses default options. Available built-options: Standard options: \"row_above\", \"row_below\", \"col_left\", \"col_right\",         \"remove_row\", \"remove_col\", \"clear_column\", \"undo\", \"redo\", \"cut\", \"copy\",         \"make_read_only\", \"alignment\", \"export_csv\" Plugin-specific options: \"freeze_column\", \"unfreeze_column\", \"borders\",         \"commentsAddEdit\", \"commentsRemove\", \"commentsReadOnly\", \"mergeCells\",         \"add_child\", \"detach_from_parent\" Separator: \"———\" (adds visual separator line) customOpts List custom context menu options. custom option list elements like name, callback, disabled, etc. Example: list(list(name = \"Custom Action\", callback = htmlwidgets::JS(\"function() {...}\")))","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_context_menu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure Context Menu — hot_context_menu","text":"Modified handsontable widget","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_context_menu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure Context Menu — hot_context_menu","text":"","code":"if (interactive()) {   library(shiny)    # Basic usage with default options   ui <- fluidPage(     titlePanel(\"Context Menu Configuration\"),     handsontableOutput(\"table1\"),     br(),     handsontableOutput(\"table2\"),     br(),     handsontableOutput(\"table3\")   )    server <- function(input, output, session) {     # Default context menu     output$table1 <- renderHandsontable({       handsontable(mtcars[1:5, 1:4]) |>         hot_context_menu()     })      # Custom selection of built-in options     output$table2 <- renderHandsontable({       handsontable(mtcars[1:5, 1:4]) |>         hot_context_menu(opts = c(\"row_above\", \"row_below\", \"---------\", \"copy\", \"cut\"))     })      # With custom options     output$table3 <- renderHandsontable({       handsontable(mtcars[1:5, 1:4]) |>         hot_context_menu(           opts = c(\"copy\", \"cut\"),           customOpts = list(             list(               name = \"Alert\",               callback = htmlwidgets::JS(\"function() { alert('Custom action!'); }\")             )           )         )     })   }    shinyApp(ui, server) }"},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Row Properties — hot_row","title":"Configure Row Properties — hot_row","text":"Configure Row Properties","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Row Properties — hot_row","text":"","code":"hot_row(hot, row, readOnly = NULL, ...)"},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Row Properties — hot_row","text":"hot handsontable widget object row Row index configure readOnly Logical, make row read-... Additional row configuration options","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure Row Properties — hot_row","text":"Modified handsontable widget","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure Row Properties — hot_row","text":"","code":"if (interactive()) {   library(shiny)    ui <- fluidPage(     titlePanel(\"Row Configuration\"),     p(\"Rows 1, 3, and 5 are read-only\"),     handsontableOutput(\"table\")   )    server <- function(input, output, session) {     output$table <- renderHandsontable({       hot_table <- handsontable(iris[1:8, ])       for (i in c(1, 3, 5)) {         hot_table <- hot_table |> hot_row(row = i, readOnly = TRUE)       }       hot_table     })   }    shinyApp(ui, server) }"},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_to_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Handsontable Data to R — hot_to_r","title":"Convert Handsontable Data to R — hot_to_r","text":"Helper function convert JavaScript Handsontable data back R format. Primarily used Shiny applications. Automatically uses original column names sent Handsontable widget.","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_to_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Handsontable Data to R — hot_to_r","text":"","code":"hot_to_r(data)"},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_to_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Handsontable Data to R — hot_to_r","text":"data Object. Handsontable input object Shiny (contains data colnames)","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_to_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Handsontable Data to R — hot_to_r","text":"data.frame","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_to_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Handsontable Data to R — hot_to_r","text":"","code":"if (interactive()) {   library(shiny)    ui <- fluidPage(     titlePanel(\"Data Conversion Demo\"),     handsontableOutput(\"input_table\"),     br(),     h4(\"Converted R Data:\"),     verbatimTextOutput(\"converted_data\")   )    server <- function(input, output, session) {     initial_data <- data.frame(       Name = c(\"John\", \"Jane\", \"Bob\"),       Age = c(25, 30, 35),       Role = c(\"Engineer\", \"Manager\", \"Developer\")     )      output$input_table <- renderHandsontable({       handsontable(initial_data)     })      output$converted_data <- renderPrint({       if (!is.null(input$input_table)) {         # Column names are automatically preserved!         converted <- hot_to_r(input$input_table)         str(converted)         converted       }     })   }    shinyApp(ui, server) }"},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Data Validation — hot_validate","title":"Configure Data Validation — hot_validate","text":"Configure Data Validation","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Data Validation — hot_validate","text":"","code":"hot_validate(   hot,   cols,   type = c(\"numeric\", \"list\", \"regexp\"),   source = NULL,   pattern = NULL,   min = NULL,   max = NULL,   allowInvalid = FALSE,   ... )"},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Data Validation — hot_validate","text":"hot handsontable widget object cols Column indices apply validation (numeric vector) type Validation type: \"numeric\", \"list\", \"regexp\" source \"list\" type, vector allowed values pattern \"regexp\" type, regular expression pattern min, max \"numeric\" type, minimum maximum values allowInvalid Logical, allow invalid values entered ... Additional validation options","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure Data Validation — hot_validate","text":"Modified handsontable widget","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/hot_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure Data Validation — hot_validate","text":"","code":"if (interactive()) {   library(shiny)    ui <- fluidPage(     titlePanel(\"Data Validation\"),     handsontableOutput(\"table\")   )    server <- function(input, output, session) {     df <- data.frame(       score = c(85, 92, 78, 95, 88),       grade = c(\"A\", \"A\", \"B\", \"A\", \"B\"),       email = c(         \"john@test.com\", \"jane@test.com\", \"bob@test.com\",         \"alice@test.com\", \"charlie@test.com\"       )     )      output$table <- renderHandsontable({       handsontable(df) |>         hot_validate(cols = 1, type = \"numeric\", min = 0, max = 100) |>         hot_validate(           cols = 2, type = \"list\",           source = c(\"A\", \"B\", \"C\", \"D\", \"F\")         ) |>         hot_validate(           cols = 3, type = \"regexp\",           pattern = \"^[\\\\w\\\\._%+-]+@[\\\\w\\\\.-]+\\\\.[A-Za-z]{2,}$\"         )     })   }    shinyApp(ui, server) }"},{"path":"https://kennedymwavu.github.io/handsontable/reference/renderHandsontable.html","id":null,"dir":"Reference","previous_headings":"","what":"Widget render function for use in Shiny — renderHandsontable","title":"Widget render function for use in Shiny — renderHandsontable","text":"Widget render function use Shiny","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/renderHandsontable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widget render function for use in Shiny — renderHandsontable","text":"","code":"renderHandsontable(expr, env = parent.frame(), quoted = FALSE)"},{"path":"https://kennedymwavu.github.io/handsontable/reference/renderHandsontable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widget render function for use in Shiny — renderHandsontable","text":"expr Expression generates handsontable env Environment evaluate expression quoted Logical indicating whether expression quoted","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/renderHandsontable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Widget render function for use in Shiny — renderHandsontable","text":"","code":"if (interactive()) {   library(shiny)    ui <- fluidPage(     titlePanel(\"Interactive Handsontable\"),     handsontableOutput(\"editable_table\")   )    server <- function(input, output, session) {     output$editable_table <- renderHandsontable({       handsontable(iris[1:10, ], readOnly = FALSE, colWidths = 120)         hot_context_menu()     })   }    shinyApp(ui, server) }"},{"path":"https://kennedymwavu.github.io/handsontable/reference/set_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Cell Data Programmatically — set_data","title":"Update Cell Data Programmatically — set_data","text":"Update Cell Data Programmatically","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/set_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Cell Data Programmatically — set_data","text":"","code":"set_data(id, row, col, val, session = shiny::getDefaultReactiveDomain())"},{"path":"https://kennedymwavu.github.io/handsontable/reference/set_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Cell Data Programmatically — set_data","text":"id String. Output ID handsontable widget. row Integer vector. Row index. col Integer vector. Column index. val . Value set cell(s). session Shiny session object","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/set_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Cell Data Programmatically — set_data","text":"NULL (called side effects)","code":""},{"path":"https://kennedymwavu.github.io/handsontable/reference/set_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Cell Data Programmatically — set_data","text":"","code":"if (interactive()) {   library(shiny)    ui <- fluidPage(     titlePanel(\"Programmatic Cell Updates\"),     handsontableOutput(\"my_table\"),     br(),     actionButton(\"update_btn\", \"Update Cell (1,1) & (2,1)\")   )    server <- function(input, output, session) {     output$my_table <- renderHandsontable({       handsontable(data.frame(         A = c(1, 2, 3),         B = c(\"a\", \"b\", \"c\")       ))     })      observeEvent(input$update_btn, {       set_data(\"my_table\", row = 1:2, col = 1, val = runif(2, 100, 999))     })   }    shinyApp(ui, server) }"},{"path":[]},{"path":"https://kennedymwavu.github.io/handsontable/news/index.html","id":"initial-release-0-1-0","dir":"Changelog","previous_headings":"","what":"Initial Release","title":"handsontable 0.1.0","text":"Support Handsontable v6.2.2 features (MIT license) Basic Handsontable widget implementation Core configuration functions (hot_col, hot_row) Data validation support (hot_validate) Context menu configuration (hot_context_menu) Shiny integration handsontableOutput renderHandsontable","code":""}]
