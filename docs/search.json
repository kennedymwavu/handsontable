[
  {
    "objectID": "options.html",
    "href": "options.html",
    "title": "options",
    "section": "",
    "text": "{handsontable} has 4 main functions to help you configure options for the table:"
  },
  {
    "objectID": "options.html#handsontable",
    "href": "options.html#handsontable",
    "title": "options",
    "section": "handsontable",
    "text": "handsontable\nhandsontable() allows you to configure table-wide options.\n\ndata\n\nyour table data. must be a data.frame or a matrix object.\n\n\nhandsontable(data = iris)\n\n\n\n\n\n\n\nwidth\n\nsets the width of the table\n\n\nhandsontable(\n  data = iris[1:3, ],\n  width = 400,\n  adaptiveHeight = TRUE\n)\n\n\n\n\n\n\n\nheight\n\nsets the height of the table\n\n\nhandsontable(\n  data = iris[1:50, ],\n  height = 200\n)\n\n\n\n\n\n\n\nadaptiveHeight\n\nif TRUE the table’s height adapts to fit it’s contents. useful when you want to show the full table regardless of the number of rows in your data.\nif TRUE, overrides the height parameter.\nadaptiveHeight = FALSE:\n\n\nhandsontable(\n  data = mtcars,\n  rowHeaders = FALSE,\n  adaptiveHeight = FALSE\n)\n\n\n\n\n\n\nadaptiveHeight = TRUE:\n\n\nhandsontable(\n  data = mtcars,\n  rowHeaders = FALSE,\n  adaptiveHeight = TRUE\n)\n\n\n\n\n\n\n\ncolHeaders\n\ncolumn names to use.\ncan be a logical (TRUE or FALSE) or a character vector of column names to use.\ncolHeaders = TRUE uses the column names of the data:\n\n\nhandsontable(\n  data = iris[1:3, ],\n  colHeaders = TRUE,\n  adaptiveHeight = TRUE\n)\n\n\n\n\n\n\ncolHeaders = FALSE omits the column names of the data and uses excel-like naming for the columns ie. “A”, “B”, “C”, etc.\n\n\nhandsontable(\n  data = iris[1:3, ],\n  colHeaders = FALSE,\n  adaptiveHeight = TRUE\n)\n\n\n\n\n\n\nyou can as well use a character vector to rename the rendered columns. this doesn’t change the column names of the underlying data.\n\n\nhandsontable(\n  data = iris[1:3, ],\n  colHeaders = c(\n    \"Sepal Length\",\n    \"Sepal Width\",\n    \"Petal Length\",\n    \"Petal Width\",\n    \"Species\"\n  ),\n  adaptiveHeight = TRUE\n)\n\n\n\n\n\n\n\nrowHeaders\n\nrow names to use.\ncan be a logical (TRUE or FALSE) or a character vector of row names to use.\nrowHeaders = TRUE uses row names of the data:\n\n\nhandsontable(\n  data = mtcars[1:3, ],\n  rowHeaders = TRUE,\n  rowHeaderWidth = 200,\n  adaptiveHeight = TRUE\n)\n\n\n\n\n\n\nrowHeaders = FALSE omits the row names column:\n\n\nhandsontable(\n  data = mtcars[1:3, ],\n  rowHeaders = FALSE,\n  adaptiveHeight = TRUE\n)\n\n\n\n\n\n\nuse a character vector if you want to customize the name of each row:\n\n\nhandsontable(\n  data = mtcars[1:3, ],\n  rowHeaders = paste0(LETTERS, letters)[1:3],\n  adaptiveHeight = TRUE\n)\n\n\n\n\n\n\n\nreadOnly\n\nby default, a handsontable is editable. ie. readOnly = FALSE.\nset readOnly = TRUE to make the table uneditable.\n\n\nhandsontable(\n  data = iris[1:3, ],\n  readOnly = TRUE,\n  adaptiveHeight = TRUE\n)\n\n\n\n\n\n\n\ncolWidths\n\nuse colWidths to configure the width of all or individual columns.\nif colWidths is a scalar numeric eg. colWidths = 200, this width is used for all columns.\n\nhandsontable(\n  data = iris[1:3, ],\n  colWidths = 300,\n  adaptiveHeight = TRUE\n)\n\n\n\n\n\nif colWidths is a numeric vector of length greater than 1, eg. colWidths = c(100, 200, 300), then the columns corresponding to those indices are given the said widths.\n\nhandsontable(\n  data = iris[1:3, ],\n  colWidths = c(100, 200, 300), # other columns use default width\n  adaptiveHeight = TRUE\n)\n\n\n\n\n\ncolWidths can as well be a JavaScript function based on visual indexes.\n\nhandsontable(\n  data = iris[1:3, ],\n  colWidths = htmlwidgets::JS(\n    \"\n    function(index) {\n      return index * 10 + 30;\n    }\n    \"\n  ),\n  adaptiveHeight = TRUE\n)\n\n\n\n\n\nJavaScript uses zero-indexing. so the actual calculations that happen are:\n\n0 × 10 + 30 = 30\n1 × 10 + 30 = 40\n2 × 10 + 30 = 50\n3 × 10 + 30 = 60\n4 × 10 + 30 = 70\n\n\n\n\nfixedColumnsLeft\n\nnumber of columns to freeze on the left.\n\nhandsontable(\n  data = iris[1:3, ],\n  fixedColumnsLeft = 2,\n  colWidths = c(100, 100, 500, 700, 900), # force creation of a wide table\n  adaptiveHeight = TRUE\n)\n\n\n\n\n\n\n\n\nfixedRowsTop\n\nnumber of rows to freeze at the top.\n\nhandsontable(\n  data = iris[1:50, ],\n  height = 300, # force short table\n  fixedRowsTop = 3\n)\n\n\n\n\n\n\n\n\nfixedRowsBottom\n\nnumber of rows to freeze at the bottom.\n\nhandsontable(\n  data = iris[1:100, ],\n  fixedRowsTop = 3,\n  fixedRowsBottom = 2\n)"
  },
  {
    "objectID": "options.html#hot_context_menu",
    "href": "options.html#hot_context_menu",
    "title": "options",
    "section": "hot_context_menu",
    "text": "hot_context_menu\nwith hot_context_menu(), you can configure options for the table’s context menu ie. the menu you see when you right-click on a handsontable."
  },
  {
    "objectID": "options.html#hot_col",
    "href": "options.html#hot_col",
    "title": "options",
    "section": "hot_col",
    "text": "hot_col\nuse hot_col() to configure options for columns. this can be a single column or multiple of them."
  },
  {
    "objectID": "options.html#hot_row",
    "href": "options.html#hot_row",
    "title": "options",
    "section": "hot_row",
    "text": "hot_row\n\nconfig options for rows\n\nuse hot_row() to configure options for rows."
  },
  {
    "objectID": "in-shiny.html",
    "href": "in-shiny.html",
    "title": "in shiny",
    "section": "",
    "text": "shiny provides the most interesting use of handsontable."
  },
  {
    "objectID": "in-shiny.html#normal-stuff",
    "href": "in-shiny.html#normal-stuff",
    "title": "in shiny",
    "section": "normal stuff",
    "text": "normal stuff\n\nconfig (handsontableOutput() + renderHandsontable())\nobservers + built-in hooks\nset data for specific cells"
  },
  {
    "objectID": "in-shiny.html#fun-stuff",
    "href": "in-shiny.html#fun-stuff",
    "title": "in shiny",
    "section": "fun stuff",
    "text": "fun stuff\n\ncustom hooks in js + observers eg. click-cell-show-modal-dialog for short tables with dropdown menu cols."
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "getting started",
    "section": "",
    "text": "library(handsontable)"
  },
  {
    "objectID": "getting-started.html#basic",
    "href": "getting-started.html#basic",
    "title": "getting started",
    "section": "basic",
    "text": "basic\n\nhandsontable(data = iris[1:10, ], adaptiveHeight = TRUE)"
  },
  {
    "objectID": "getting-started.html#read-only",
    "href": "getting-started.html#read-only",
    "title": "getting started",
    "section": "read-only",
    "text": "read-only\nto make the table read-only, set readOnly = TRUE. this will prevent any editing of the table.\n\nhandsontable(\n  data = iris[1:5, ],\n  adaptiveHeight = TRUE,\n  readOnly = TRUE\n)"
  },
  {
    "objectID": "getting-started.html#headers",
    "href": "getting-started.html#headers",
    "title": "getting started",
    "section": "headers",
    "text": "headers\n\ncolHeaders\nby default, colHeaders = TRUE and uses the column names of the data frame.\n\nhandsontable(\n  data = iris[1:5, ],\n  adaptiveHeight = TRUE,\n  colHeaders = TRUE\n)\n\n\n\n\n\nsetting colHeaders = FALSE will remove the column headers.\n\nhandsontable(\n  data = iris[1:5, ],\n  adaptiveHeight = TRUE,\n  colHeaders = FALSE\n)\n\n\n\n\n\nto set custom column headers, pass a character vector to colHeaders.\n\nhandsontable(\n  data = iris[1:5, ],\n  adaptiveHeight = TRUE,\n  colHeaders = c(\n    \"Sepal Length\",\n    \"Sepal Width\",\n    \"Petal Length\",\n    \"Petal Width\",\n    \"Species\"\n  )\n)\n\n\n\n\n\nrowHeaders\nby default, rowHeaders = TRUE and uses the row names of the data frame.\n\nhandsontable(\n  data = mtcars[1:5, ],\n  adaptiveHeight = TRUE,\n  rowHeaders = TRUE,\n  rowHeaderWidth = 200\n)\n\n\n\n\n\nsetting rowHeaders = FALSE will remove the row headers.\n\nhandsontable(\n  data = mtcars[1:5, ],\n  adaptiveHeight = TRUE,\n  rowHeaders = FALSE\n)\n\n\n\n\n\nto set custom row headers, pass a character vector to rowHeaders.\n\nhandsontable(\n  data = mtcars[1:5, ],\n  adaptiveHeight = TRUE,\n  rowHeaders = c(\"Row 1\", \"Row 2\", \"Row 3\", \"Row 4\", \"Row 5\")\n)"
  },
  {
    "objectID": "getting-started.html#dimensions",
    "href": "getting-started.html#dimensions",
    "title": "getting started",
    "section": "dimensions",
    "text": "dimensions\n\nwidth & height\n\nhandsontable(\n  data = mtcars,\n  width = 500,\n  height = 300,\n  rowHeaderWidth = 200\n)\n\n\n\n\n\nsetting adaptiveHeight = TRUE will make the table height adapt to the content of the cells, so that no vertical scrollbar is shown.\n\nhandsontable(\n  data = mtcars,\n  adaptiveHeight = TRUE,\n  rowHeaderWidth = 200\n)"
  },
  {
    "objectID": "getting-started.html#column-widths",
    "href": "getting-started.html#column-widths",
    "title": "getting started",
    "section": "column widths",
    "text": "column widths\nto set the width of individual columns, pass a numeric vector to colWidths.\n\nhandsontable(\n  data = iris[1:5, ],\n  adaptiveHeight = TRUE,\n  colWidths = c(100, 150, 200, 250, 300)\n)"
  },
  {
    "objectID": "getting-started.html#column-stretching",
    "href": "getting-started.html#column-stretching",
    "title": "getting started",
    "section": "column stretching",
    "text": "column stretching\n\nstretchH = \"all\" will stretch all columns to fit the width of the table.\n\nhandsontable(\n  data = iris[1:5, 1:3],\n  adaptiveHeight = TRUE,\n  stretchH = \"all\"\n)\n\n\n\n\n\nstretchH = \"last\" will stretch the last column to fit the width of the table.\n\nhandsontable(\n  data = iris[1:5, 1:3],\n  adaptiveHeight = TRUE,\n  stretchH = \"last\"\n)\n\n\n\n\n\nstretchH = \"none\" will not stretch any columns.\n\nhandsontable(\n  data = iris[1:5, 1:3],\n  adaptiveHeight = TRUE,\n  stretchH = \"none\"\n)"
  },
  {
    "objectID": "getting-started.html#fixed-columns-rows",
    "href": "getting-started.html#fixed-columns-rows",
    "title": "getting started",
    "section": "fixed columns & rows",
    "text": "fixed columns & rows\n\nset fixedColumnsLeft to fix a number of columns on the left side of the table.\n\nhandsontable(\n  data = mtcars[1:10, ],\n  adaptiveHeight = TRUE,\n  fixedColumnsLeft = 2,\n  rowHeaderWidth = 200,\n  width = 500\n)\n\n\n\n\n\nset fixedRowsTop to fix a number of rows on the top of the table.\n\nhandsontable(\n  data = mtcars,\n  fixedRowsTop = 2,\n  rowHeaderWidth = 200\n)\n\n\n\n\n\nset fixedRowsBottom to fix a number of rows on the bottom of the table.\n\nhandsontable(\n  data = mtcars,\n  fixedRowsBottom = 2,\n  rowHeaderWidth = 200\n)"
  },
  {
    "objectID": "getting-started.html#manual-column-row-move",
    "href": "getting-started.html#manual-column-row-move",
    "title": "getting started",
    "section": "manual column & row move",
    "text": "manual column & row move\n\nsetting manualColumnMove = TRUE will allow users to move columns by dragging the column headers.\n\nhandsontable(\n  data = iris[1:10, ],\n  adaptiveHeight = TRUE,\n  manualColumnMove = TRUE\n)\n\n\n\n\n\nsetting manualRowMove = TRUE will allow users to move rows by dragging the row headers.\n\nhandsontable(\n  data = mtcars,\n  adaptiveHeight = TRUE,\n  manualRowMove = TRUE,\n  rowHeaderWidth = 200\n)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "about",
    "section": "",
    "text": "this is an R interface to the handsontable.js library v6.2.2."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "home",
    "section": "",
    "text": "R interface to the Handsontable JavaScript library v6.2.2 (MIT license).\ncreate interactive spreadsheet-like data grids with data validation, sorting, and filtering."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "home",
    "section": "installation",
    "text": "installation\n# install from CRAN\ninstall.packages(\"handsontable\")\n# or install from GitHub\ndevtools::install_github(\"kennedymwavu/handsontable\")\n\n# load the package:\nlibrary(handsontable)"
  },
  {
    "objectID": "index.html#quick-example",
    "href": "index.html#quick-example",
    "title": "home",
    "section": "quick example",
    "text": "quick example\n\n# basic table:\nhandsontable(mtcars, rowHeaderWidth = 200)\n\n\n\n\n# col & row specific config + validation + context menu:\nhandsontable(\n  iris[1:8, ],\n  adaptiveHeight = TRUE\n) |&gt;\n  hot_col(\n    col = \"Species\",\n    type = \"dropdown\",\n    source = c(\"setosa\", \"versicolor\", \"virginica\")\n  ) |&gt;\n  hot_validate(\n    col = 1:4,\n    type = \"numeric\",\n    min = 0\n  ) |&gt;\n  hot_row(row = 6:7, readOnly = TRUE) |&gt;\n  hot_context_menu()\n\n\n\n\n\n\nright-click to see the context menu\ntry entering an invalid value (like a letter) in the first 4 columns."
  },
  {
    "objectID": "index.html#shiny-integration",
    "href": "index.html#shiny-integration",
    "title": "home",
    "section": "shiny integration",
    "text": "shiny integration\nlibrary(shiny)\n\nui &lt;- fluidPage(handsontableOutput(\"table\"))\n\nserver &lt;- function(input, output) {\n  output$table &lt;- renderHandsontable({\n    handsontable(iris[1:10, ]) |&gt;\n      hot_context_menu()\n  })\n\n  # detect changes:\n  observeEvent(input$table, {\n    updated_data &lt;- hot_to_r(data = input$table)\n    cat(\"Updated data:\\n\")\n    print(updated_data)\n    # use updated data...\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "index.html#similar-packages",
    "href": "index.html#similar-packages",
    "title": "home",
    "section": "similar packages",
    "text": "similar packages\n\n{rhandsontable}\nthe rhandsontable package provides an R interface to handsontable and has been a valuable tool for the R community. however, it hasn’t been actively maintained in recent years.\n{handsontable} was developed to ensure active maintenance with regular updates, bug fixes, and feature enhancements that the community needs."
  }
]